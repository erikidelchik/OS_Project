==5144== Helgrind, a thread error detector
==5144== Copyright (C) 2007-2017, and GNU GPL'd, by OpenWorks LLP et al.
==5144== Using Valgrind-3.18.1 and LibVEX; rerun with -h for copyright info
==5144== Command: ./main
==5144== 
==5144== ---Thread-Announcement------------------------------------------
==5144== 
==5144== Thread #1 is the program's root thread
==5144== 
==5144== ---Thread-Announcement------------------------------------------
==5144== 
==5144== Thread #2 was created
==5144==    at 0x4BE49F3: clone (clone.S:76)
==5144==    by 0x4BE58EE: __clone_internal (clone-internal.c:83)
==5144==    by 0x4B536D8: create_thread (pthread_create.c:295)
==5144==    by 0x4B541FF: pthread_create@@GLIBC_2.34 (pthread_create.c:828)
==5144==    by 0x4853767: ??? (in /usr/libexec/valgrind/vgpreload_helgrind-amd64-linux.so)
==5144==    by 0x494F328: std::thread::_M_start_thread(std::unique_ptr<std::thread::_State, std::default_delete<std::thread::_State> >, void (*)()) (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.30)
==5144==    by 0x13112D: std::thread::thread<void (&)(int), int, void>(void (&)(int), int&&) (std_thread.h:143)
==5144==    by 0x12DFB6: void __gnu_cxx::new_allocator<std::thread>::construct<std::thread, void (&)(int), int>(std::thread*, void (&)(int), int&&) (new_allocator.h:162)
==5144==    by 0x12A893: void std::allocator_traits<std::allocator<std::thread> >::construct<std::thread, void (&)(int), int>(std::allocator<std::thread>&, std::thread*, void (&)(int), int&&) (alloc_traits.h:516)
==5144==    by 0x12AA91: void std::vector<std::thread, std::allocator<std::thread> >::_M_realloc_insert<void (&)(int), int>(__gnu_cxx::__normal_iterator<std::thread*, std::vector<std::thread, std::allocator<std::thread> > >, void (&)(int), int&&) (vector.tcc:449)
==5144==    by 0x1268C8: std::thread& std::vector<std::thread, std::allocator<std::thread> >::emplace_back<void (&)(int), int>(void (&)(int), int&&) (vector.tcc:121)
==5144==    by 0x121036: main (main.cpp:359)
==5144== 
==5144== ----------------------------------------------------------------
==5144== 
==5144== Possible data race during read of size 8 at 0x15A560 by thread #1
==5144== Locks held: none
==5144==    at 0x124C4B: int&& std::forward<int>(std::remove_reference<int>::type&) (move.h:77)
==5144==    by 0x12685F: std::thread& std::vector<std::thread, std::allocator<std::thread> >::emplace_back<void (&)(int), int>(void (&)(int), int&&) (vector.tcc:121)
==5144==    by 0x121036: main (main.cpp:359)
==5144== 
==5144== This conflicts with a previous write of size 8 by thread #2
==5144== Locks held: none
==5144==    at 0x124C56: int&& std::forward<int>(std::remove_reference<int>::type&) (move.h:77)
==5144==    by 0x139F37: std::tuple_element<1ul, std::tuple<void (*)(int), int> >::type&& std::get<1ul, void (*)(int), int>(std::tuple<void (*)(int), int>&&) (tuple:1408)
==5144==    by 0x139A9C: void std::thread::_Invoker<std::tuple<void (*)(int), int> >::_M_invoke<0ul, 1ul>(std::_Index_tuple<0ul, 1ul>) (std_thread.h:259)
==5144==    by 0x13995B: std::thread::_Invoker<std::tuple<void (*)(int), int> >::operator()() (std_thread.h:266)
==5144==    by 0x139827: std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)(int), int> > >::_M_run() (std_thread.h:211)
==5144==    by 0x494F252: ??? (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.30)
==5144==    by 0x485396A: ??? (in /usr/libexec/valgrind/vgpreload_helgrind-amd64-linux.so)
==5144==    by 0x4B53AC2: start_thread (pthread_create.c:442)
==5144==  Address 0x15a560 is 0 bytes inside data symbol "__gcov0._ZSt7forwardIiEOT_RNSt16remove_referenceIS0_E4typeE"
==5144== 
==5144== ----------------------------------------------------------------
==5144== 
==5144== Possible data race during write of size 8 at 0x15A560 by thread #1
==5144== Locks held: none
==5144==    at 0x124C56: int&& std::forward<int>(std::remove_reference<int>::type&) (move.h:77)
==5144==    by 0x12685F: std::thread& std::vector<std::thread, std::allocator<std::thread> >::emplace_back<void (&)(int), int>(void (&)(int), int&&) (vector.tcc:121)
==5144==    by 0x121036: main (main.cpp:359)
==5144== 
==5144== This conflicts with a previous write of size 8 by thread #2
==5144== Locks held: none
==5144==    at 0x124C56: int&& std::forward<int>(std::remove_reference<int>::type&) (move.h:77)
==5144==    by 0x139F37: std::tuple_element<1ul, std::tuple<void (*)(int), int> >::type&& std::get<1ul, void (*)(int), int>(std::tuple<void (*)(int), int>&&) (tuple:1408)
==5144==    by 0x139A9C: void std::thread::_Invoker<std::tuple<void (*)(int), int> >::_M_invoke<0ul, 1ul>(std::_Index_tuple<0ul, 1ul>) (std_thread.h:259)
==5144==    by 0x13995B: std::thread::_Invoker<std::tuple<void (*)(int), int> >::operator()() (std_thread.h:266)
==5144==    by 0x139827: std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)(int), int> > >::_M_run() (std_thread.h:211)
==5144==    by 0x494F252: ??? (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.30)
==5144==    by 0x485396A: ??? (in /usr/libexec/valgrind/vgpreload_helgrind-amd64-linux.so)
==5144==    by 0x4B53AC2: start_thread (pthread_create.c:442)
==5144==  Address 0x15a560 is 0 bytes inside data symbol "__gcov0._ZSt7forwardIiEOT_RNSt16remove_referenceIS0_E4typeE"
==5144== 
==5144== ---Thread-Announcement------------------------------------------
==5144== 
==5144== Thread #3 was created
==5144==    at 0x4BE49F3: clone (clone.S:76)
==5144==    by 0x4BE58EE: __clone_internal (clone-internal.c:83)
==5144==    by 0x4B536D8: create_thread (pthread_create.c:295)
==5144==    by 0x4B541FF: pthread_create@@GLIBC_2.34 (pthread_create.c:828)
==5144==    by 0x4853767: ??? (in /usr/libexec/valgrind/vgpreload_helgrind-amd64-linux.so)
==5144==    by 0x494F328: std::thread::_M_start_thread(std::unique_ptr<std::thread::_State, std::default_delete<std::thread::_State> >, void (*)()) (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.30)
==5144==    by 0x13112D: std::thread::thread<void (&)(int), int, void>(void (&)(int), int&&) (std_thread.h:143)
==5144==    by 0x12DFB6: void __gnu_cxx::new_allocator<std::thread>::construct<std::thread, void (&)(int), int>(std::thread*, void (&)(int), int&&) (new_allocator.h:162)
==5144==    by 0x12A893: void std::allocator_traits<std::allocator<std::thread> >::construct<std::thread, void (&)(int), int>(std::allocator<std::thread>&, std::thread*, void (&)(int), int&&) (alloc_traits.h:516)
==5144==    by 0x12AA91: void std::vector<std::thread, std::allocator<std::thread> >::_M_realloc_insert<void (&)(int), int>(__gnu_cxx::__normal_iterator<std::thread*, std::vector<std::thread, std::allocator<std::thread> > >, void (&)(int), int&&) (vector.tcc:449)
==5144==    by 0x1268C8: std::thread& std::vector<std::thread, std::allocator<std::thread> >::emplace_back<void (&)(int), int>(void (&)(int), int&&) (vector.tcc:121)
==5144==    by 0x121036: main (main.cpp:359)
==5144== 
==5144== ----------------------------------------------------------------
==5144== 
==5144== Possible data race during read of size 8 at 0x155C40 by thread #3
==5144== Locks held: none
==5144==    at 0x139806: std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)(int), int> > >::_M_run() (std_thread.h:211)
==5144==    by 0x494F252: ??? (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.30)
==5144==    by 0x485396A: ??? (in /usr/libexec/valgrind/vgpreload_helgrind-amd64-linux.so)
==5144==    by 0x4B53AC2: start_thread (pthread_create.c:442)
==5144==    by 0x4BE4A03: clone (clone.S:100)
==5144== 
==5144== This conflicts with a previous write of size 8 by thread #2
==5144== Locks held: none
==5144==    at 0x139811: std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)(int), int> > >::_M_run() (std_thread.h:211)
==5144==    by 0x494F252: ??? (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.30)
==5144==    by 0x485396A: ??? (in /usr/libexec/valgrind/vgpreload_helgrind-amd64-linux.so)
==5144==    by 0x4B53AC2: start_thread (pthread_create.c:442)
==5144==    by 0x4BE4A03: clone (clone.S:100)
==5144==  Address 0x155c40 is 0 bytes inside data symbol "__gcov0._ZNSt6thread11_State_implINS_8_InvokerISt5tupleIJPFviEiEEEEE6_M_runEv"
==5144== 
==5144== ----------------------------------------------------------------
==5144== 
==5144== Possible data race during write of size 8 at 0x155C40 by thread #3
==5144== Locks held: none
==5144==    at 0x139811: std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)(int), int> > >::_M_run() (std_thread.h:211)
==5144==    by 0x494F252: ??? (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.30)
==5144==    by 0x485396A: ??? (in /usr/libexec/valgrind/vgpreload_helgrind-amd64-linux.so)
==5144==    by 0x4B53AC2: start_thread (pthread_create.c:442)
==5144==    by 0x4BE4A03: clone (clone.S:100)
==5144== 
==5144== This conflicts with a previous write of size 8 by thread #2
==5144== Locks held: none
==5144==    at 0x139811: std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)(int), int> > >::_M_run() (std_thread.h:211)
==5144==    by 0x494F252: ??? (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.30)
==5144==    by 0x485396A: ??? (in /usr/libexec/valgrind/vgpreload_helgrind-amd64-linux.so)
==5144==    by 0x4B53AC2: start_thread (pthread_create.c:442)
==5144==    by 0x4BE4A03: clone (clone.S:100)
==5144==  Address 0x155c40 is 0 bytes inside data symbol "__gcov0._ZNSt6thread11_State_implINS_8_InvokerISt5tupleIJPFviEiEEEEE6_M_runEv"
==5144== 
==5144== ----------------------------------------------------------------
==5144== 
==5144== Possible data race during read of size 8 at 0x155C00 by thread #3
==5144== Locks held: none
==5144==    at 0x13993E: std::thread::_Invoker<std::tuple<void (*)(int), int> >::operator()() (std_thread.h:262)
==5144==    by 0x139827: std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)(int), int> > >::_M_run() (std_thread.h:211)
==5144==    by 0x494F252: ??? (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.30)
==5144==    by 0x485396A: ??? (in /usr/libexec/valgrind/vgpreload_helgrind-amd64-linux.so)
==5144==    by 0x4B53AC2: start_thread (pthread_create.c:442)
==5144==    by 0x4BE4A03: clone (clone.S:100)
==5144== 
==5144== This conflicts with a previous write of size 8 by thread #2
==5144== Locks held: none
==5144==    at 0x139949: std::thread::_Invoker<std::tuple<void (*)(int), int> >::operator()() (std_thread.h:262)
==5144==    by 0x139827: std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)(int), int> > >::_M_run() (std_thread.h:211)
==5144==    by 0x494F252: ??? (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.30)
==5144==    by 0x485396A: ??? (in /usr/libexec/valgrind/vgpreload_helgrind-amd64-linux.so)
==5144==    by 0x4B53AC2: start_thread (pthread_create.c:442)
==5144==    by 0x4BE4A03: clone (clone.S:100)
==5144==  Address 0x155c00 is 0 bytes inside data symbol "__gcov0._ZNSt6thread8_InvokerISt5tupleIJPFviEiEEEclEv"
==5144== 
==5144== ----------------------------------------------------------------
==5144== 
==5144== Possible data race during write of size 8 at 0x155C00 by thread #3
==5144== Locks held: none
==5144==    at 0x139949: std::thread::_Invoker<std::tuple<void (*)(int), int> >::operator()() (std_thread.h:262)
==5144==    by 0x139827: std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)(int), int> > >::_M_run() (std_thread.h:211)
==5144==    by 0x494F252: ??? (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.30)
==5144==    by 0x485396A: ??? (in /usr/libexec/valgrind/vgpreload_helgrind-amd64-linux.so)
==5144==    by 0x4B53AC2: start_thread (pthread_create.c:442)
==5144==    by 0x4BE4A03: clone (clone.S:100)
==5144== 
==5144== This conflicts with a previous write of size 8 by thread #2
==5144== Locks held: none
==5144==    at 0x139949: std::thread::_Invoker<std::tuple<void (*)(int), int> >::operator()() (std_thread.h:262)
==5144==    by 0x139827: std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)(int), int> > >::_M_run() (std_thread.h:211)
==5144==    by 0x494F252: ??? (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.30)
==5144==    by 0x485396A: ??? (in /usr/libexec/valgrind/vgpreload_helgrind-amd64-linux.so)
==5144==    by 0x4B53AC2: start_thread (pthread_create.c:442)
==5144==    by 0x4BE4A03: clone (clone.S:100)
==5144==  Address 0x155c00 is 0 bytes inside data symbol "__gcov0._ZNSt6thread8_InvokerISt5tupleIJPFviEiEEEclEv"
==5144== 
==5144== ----------------------------------------------------------------
==5144== 
==5144== Possible data race during read of size 8 at 0x155BA0 by thread #3
==5144== Locks held: none
==5144==    at 0x139A65: void std::thread::_Invoker<std::tuple<void (*)(int), int> >::_M_invoke<0ul, 1ul>(std::_Index_tuple<0ul, 1ul>) (std_thread.h:258)
==5144==    by 0x13995B: std::thread::_Invoker<std::tuple<void (*)(int), int> >::operator()() (std_thread.h:266)
==5144==    by 0x139827: std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)(int), int> > >::_M_run() (std_thread.h:211)
==5144==    by 0x494F252: ??? (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.30)
==5144==    by 0x485396A: ??? (in /usr/libexec/valgrind/vgpreload_helgrind-amd64-linux.so)
==5144==    by 0x4B53AC2: start_thread (pthread_create.c:442)
==5144==    by 0x4BE4A03: clone (clone.S:100)
==5144== 
==5144== This conflicts with a previous write of size 8 by thread #2
==5144== Locks held: none
==5144==    at 0x139A70: void std::thread::_Invoker<std::tuple<void (*)(int), int> >::_M_invoke<0ul, 1ul>(std::_Index_tuple<0ul, 1ul>) (std_thread.h:258)
==5144==    by 0x13995B: std::thread::_Invoker<std::tuple<void (*)(int), int> >::operator()() (std_thread.h:266)
==5144==    by 0x139827: std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)(int), int> > >::_M_run() (std_thread.h:211)
==5144==    by 0x494F252: ??? (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.30)
==5144==    by 0x485396A: ??? (in /usr/libexec/valgrind/vgpreload_helgrind-amd64-linux.so)
==5144==    by 0x4B53AC2: start_thread (pthread_create.c:442)
==5144==    by 0x4BE4A03: clone (clone.S:100)
==5144==  Address 0x155ba0 is 0 bytes inside data symbol "__gcov0._ZNSt6thread8_InvokerISt5tupleIJPFviEiEEE9_M_invokeIJLm0ELm1EEEEvSt12_Index_tupleIJXspT_EEE"
==5144== 
==5144== ----------------------------------------------------------------
==5144== 
==5144== Possible data race during write of size 8 at 0x155BA0 by thread #3
==5144== Locks held: none
==5144==    at 0x139A70: void std::thread::_Invoker<std::tuple<void (*)(int), int> >::_M_invoke<0ul, 1ul>(std::_Index_tuple<0ul, 1ul>) (std_thread.h:258)
==5144==    by 0x13995B: std::thread::_Invoker<std::tuple<void (*)(int), int> >::operator()() (std_thread.h:266)
==5144==    by 0x139827: std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)(int), int> > >::_M_run() (std_thread.h:211)
==5144==    by 0x494F252: ??? (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.30)
==5144==    by 0x485396A: ??? (in /usr/libexec/valgrind/vgpreload_helgrind-amd64-linux.so)
==5144==    by 0x4B53AC2: start_thread (pthread_create.c:442)
==5144==    by 0x4BE4A03: clone (clone.S:100)
==5144== 
==5144== This conflicts with a previous write of size 8 by thread #2
==5144== Locks held: none
==5144==    at 0x139A70: void std::thread::_Invoker<std::tuple<void (*)(int), int> >::_M_invoke<0ul, 1ul>(std::_Index_tuple<0ul, 1ul>) (std_thread.h:258)
==5144==    by 0x13995B: std::thread::_Invoker<std::tuple<void (*)(int), int> >::operator()() (std_thread.h:266)
==5144==    by 0x139827: std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)(int), int> > >::_M_run() (std_thread.h:211)
==5144==    by 0x494F252: ??? (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.30)
==5144==    by 0x485396A: ??? (in /usr/libexec/valgrind/vgpreload_helgrind-amd64-linux.so)
==5144==    by 0x4B53AC2: start_thread (pthread_create.c:442)
==5144==    by 0x4BE4A03: clone (clone.S:100)
==5144==  Address 0x155ba0 is 0 bytes inside data symbol "__gcov0._ZNSt6thread8_InvokerISt5tupleIJPFviEiEEE9_M_invokeIJLm0ELm1EEEEvSt12_Index_tupleIJXspT_EEE"
==5144== 
==5144== ----------------------------------------------------------------
==5144== 
==5144== Possible data race during read of size 8 at 0x155AB8 by thread #3
==5144== Locks held: none
==5144==    at 0x139E6F: std::remove_reference<std::tuple<void (*)(int), int>&>::type&& std::move<std::tuple<void (*)(int), int>&>(std::tuple<void (*)(int), int>&) (move.h:104)
==5144==    by 0x139A82: void std::thread::_Invoker<std::tuple<void (*)(int), int> >::_M_invoke<0ul, 1ul>(std::_Index_tuple<0ul, 1ul>) (std_thread.h:259)
==5144==    by 0x13995B: std::thread::_Invoker<std::tuple<void (*)(int), int> >::operator()() (std_thread.h:266)
==5144==    by 0x139827: std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)(int), int> > >::_M_run() (std_thread.h:211)
==5144==    by 0x494F252: ??? (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.30)
==5144==    by 0x485396A: ??? (in /usr/libexec/valgrind/vgpreload_helgrind-amd64-linux.so)
==5144==    by 0x4B53AC2: start_thread (pthread_create.c:442)
==5144==    by 0x4BE4A03: clone (clone.S:100)
==5144== 
==5144== This conflicts with a previous write of size 8 by thread #2
==5144== Locks held: none
==5144==    at 0x139E7A: std::remove_reference<std::tuple<void (*)(int), int>&>::type&& std::move<std::tuple<void (*)(int), int>&>(std::tuple<void (*)(int), int>&) (move.h:104)
==5144==    by 0x139A82: void std::thread::_Invoker<std::tuple<void (*)(int), int> >::_M_invoke<0ul, 1ul>(std::_Index_tuple<0ul, 1ul>) (std_thread.h:259)
==5144==    by 0x13995B: std::thread::_Invoker<std::tuple<void (*)(int), int> >::operator()() (std_thread.h:266)
==5144==    by 0x139827: std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)(int), int> > >::_M_run() (std_thread.h:211)
==5144==    by 0x494F252: ??? (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.30)
==5144==    by 0x485396A: ??? (in /usr/libexec/valgrind/vgpreload_helgrind-amd64-linux.so)
==5144==    by 0x4B53AC2: start_thread (pthread_create.c:442)
==5144==    by 0x4BE4A03: clone (clone.S:100)
==5144==  Address 0x155ab8 is 0 bytes inside data symbol "__gcov0._ZSt4moveIRSt5tupleIJPFviEiEEEONSt16remove_referenceIT_E4typeEOS6_"
==5144== 
==5144== ----------------------------------------------------------------
==5144== 
==5144== Possible data race during write of size 8 at 0x155AB8 by thread #3
==5144== Locks held: none
==5144==    at 0x139E7A: std::remove_reference<std::tuple<void (*)(int), int>&>::type&& std::move<std::tuple<void (*)(int), int>&>(std::tuple<void (*)(int), int>&) (move.h:104)
==5144==    by 0x139A82: void std::thread::_Invoker<std::tuple<void (*)(int), int> >::_M_invoke<0ul, 1ul>(std::_Index_tuple<0ul, 1ul>) (std_thread.h:259)
==5144==    by 0x13995B: std::thread::_Invoker<std::tuple<void (*)(int), int> >::operator()() (std_thread.h:266)
==5144==    by 0x139827: std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)(int), int> > >::_M_run() (std_thread.h:211)
==5144==    by 0x494F252: ??? (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.30)
==5144==    by 0x485396A: ??? (in /usr/libexec/valgrind/vgpreload_helgrind-amd64-linux.so)
==5144==    by 0x4B53AC2: start_thread (pthread_create.c:442)
==5144==    by 0x4BE4A03: clone (clone.S:100)
==5144== 
==5144== This conflicts with a previous write of size 8 by thread #2
==5144== Locks held: none
==5144==    at 0x139E7A: std::remove_reference<std::tuple<void (*)(int), int>&>::type&& std::move<std::tuple<void (*)(int), int>&>(std::tuple<void (*)(int), int>&) (move.h:104)
==5144==    by 0x139A82: void std::thread::_Invoker<std::tuple<void (*)(int), int> >::_M_invoke<0ul, 1ul>(std::_Index_tuple<0ul, 1ul>) (std_thread.h:259)
==5144==    by 0x13995B: std::thread::_Invoker<std::tuple<void (*)(int), int> >::operator()() (std_thread.h:266)
==5144==    by 0x139827: std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)(int), int> > >::_M_run() (std_thread.h:211)
==5144==    by 0x494F252: ??? (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.30)
==5144==    by 0x485396A: ??? (in /usr/libexec/valgrind/vgpreload_helgrind-amd64-linux.so)
==5144==    by 0x4B53AC2: start_thread (pthread_create.c:442)
==5144==    by 0x4BE4A03: clone (clone.S:100)
==5144==  Address 0x155ab8 is 0 bytes inside data symbol "__gcov0._ZSt4moveIRSt5tupleIJPFviEiEEEONSt16remove_referenceIT_E4typeEOS6_"
==5144== 
==5144== ----------------------------------------------------------------
==5144== 
==5144== Possible data race during read of size 8 at 0x155BA8 by thread #3
==5144== Locks held: none
==5144==    at 0x139A83: void std::thread::_Invoker<std::tuple<void (*)(int), int> >::_M_invoke<0ul, 1ul>(std::_Index_tuple<0ul, 1ul>) (std_thread.h:259)
==5144==    by 0x13995B: std::thread::_Invoker<std::tuple<void (*)(int), int> >::operator()() (std_thread.h:266)
==5144==    by 0x139827: std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)(int), int> > >::_M_run() (std_thread.h:211)
==5144==    by 0x494F252: ??? (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.30)
==5144==    by 0x485396A: ??? (in /usr/libexec/valgrind/vgpreload_helgrind-amd64-linux.so)
==5144==    by 0x4B53AC2: start_thread (pthread_create.c:442)
==5144==    by 0x4BE4A03: clone (clone.S:100)
==5144== 
==5144== This conflicts with a previous write of size 8 by thread #2
==5144== Locks held: none
==5144==    at 0x139A8E: void std::thread::_Invoker<std::tuple<void (*)(int), int> >::_M_invoke<0ul, 1ul>(std::_Index_tuple<0ul, 1ul>) (std_thread.h:259)
==5144==    by 0x13995B: std::thread::_Invoker<std::tuple<void (*)(int), int> >::operator()() (std_thread.h:266)
==5144==    by 0x139827: std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)(int), int> > >::_M_run() (std_thread.h:211)
==5144==    by 0x494F252: ??? (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.30)
==5144==    by 0x485396A: ??? (in /usr/libexec/valgrind/vgpreload_helgrind-amd64-linux.so)
==5144==    by 0x4B53AC2: start_thread (pthread_create.c:442)
==5144==    by 0x4BE4A03: clone (clone.S:100)
==5144==  Address 0x155ba8 is 8 bytes inside data symbol "__gcov0._ZNSt6thread8_InvokerISt5tupleIJPFviEiEEE9_M_invokeIJLm0ELm1EEEEvSt12_Index_tupleIJXspT_EEE"
==5144== 
==5144== ----------------------------------------------------------------
==5144== 
==5144== Possible data race during write of size 8 at 0x155BA8 by thread #3
==5144== Locks held: none
==5144==    at 0x139A8E: void std::thread::_Invoker<std::tuple<void (*)(int), int> >::_M_invoke<0ul, 1ul>(std::_Index_tuple<0ul, 1ul>) (std_thread.h:259)
==5144==    by 0x13995B: std::thread::_Invoker<std::tuple<void (*)(int), int> >::operator()() (std_thread.h:266)
==5144==    by 0x139827: std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)(int), int> > >::_M_run() (std_thread.h:211)
==5144==    by 0x494F252: ??? (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.30)
==5144==    by 0x485396A: ??? (in /usr/libexec/valgrind/vgpreload_helgrind-amd64-linux.so)
==5144==    by 0x4B53AC2: start_thread (pthread_create.c:442)
==5144==    by 0x4BE4A03: clone (clone.S:100)
==5144== 
==5144== This conflicts with a previous write of size 8 by thread #2
==5144== Locks held: none
==5144==    at 0x139A8E: void std::thread::_Invoker<std::tuple<void (*)(int), int> >::_M_invoke<0ul, 1ul>(std::_Index_tuple<0ul, 1ul>) (std_thread.h:259)
==5144==    by 0x13995B: std::thread::_Invoker<std::tuple<void (*)(int), int> >::operator()() (std_thread.h:266)
==5144==    by 0x139827: std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)(int), int> > >::_M_run() (std_thread.h:211)
==5144==    by 0x494F252: ??? (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.30)
==5144==    by 0x485396A: ??? (in /usr/libexec/valgrind/vgpreload_helgrind-amd64-linux.so)
==5144==    by 0x4B53AC2: start_thread (pthread_create.c:442)
==5144==    by 0x4BE4A03: clone (clone.S:100)
==5144==  Address 0x155ba8 is 8 bytes inside data symbol "__gcov0._ZNSt6thread8_InvokerISt5tupleIJPFviEiEEE9_M_invokeIJLm0ELm1EEEEvSt12_Index_tupleIJXspT_EEE"
==5144== 
==5144== ----------------------------------------------------------------
==5144== 
==5144== Possible data race during read of size 8 at 0x155A80 by thread #3
==5144== Locks held: none
==5144==    at 0x139F00: std::tuple_element<1ul, std::tuple<void (*)(int), int> >::type&& std::get<1ul, void (*)(int), int>(std::tuple<void (*)(int), int>&&) (tuple:1405)
==5144==    by 0x139A9C: void std::thread::_Invoker<std::tuple<void (*)(int), int> >::_M_invoke<0ul, 1ul>(std::_Index_tuple<0ul, 1ul>) (std_thread.h:259)
==5144==    by 0x13995B: std::thread::_Invoker<std::tuple<void (*)(int), int> >::operator()() (std_thread.h:266)
==5144==    by 0x139827: std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)(int), int> > >::_M_run() (std_thread.h:211)
==5144==    by 0x494F252: ??? (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.30)
==5144==    by 0x485396A: ??? (in /usr/libexec/valgrind/vgpreload_helgrind-amd64-linux.so)
==5144==    by 0x4B53AC2: start_thread (pthread_create.c:442)
==5144==    by 0x4BE4A03: clone (clone.S:100)
==5144== 
==5144== This conflicts with a previous write of size 8 by thread #2
==5144== Locks held: none
==5144==    at 0x139F0B: std::tuple_element<1ul, std::tuple<void (*)(int), int> >::type&& std::get<1ul, void (*)(int), int>(std::tuple<void (*)(int), int>&&) (tuple:1405)
==5144==    by 0x139A9C: void std::thread::_Invoker<std::tuple<void (*)(int), int> >::_M_invoke<0ul, 1ul>(std::_Index_tuple<0ul, 1ul>) (std_thread.h:259)
==5144==    by 0x13995B: std::thread::_Invoker<std::tuple<void (*)(int), int> >::operator()() (std_thread.h:266)
==5144==    by 0x139827: std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)(int), int> > >::_M_run() (std_thread.h:211)
==5144==    by 0x494F252: ??? (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.30)
==5144==    by 0x485396A: ??? (in /usr/libexec/valgrind/vgpreload_helgrind-amd64-linux.so)
==5144==    by 0x4B53AC2: start_thread (pthread_create.c:442)
==5144==    by 0x4BE4A03: clone (clone.S:100)
==5144==  Address 0x155a80 is 0 bytes inside data symbol "__gcov0._ZSt3getILm1EJPFviEiEEONSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeEOS6_"
==5144== 
==5144== ----------------------------------------------------------------
==5144== 
==5144== Possible data race during write of size 8 at 0x155A80 by thread #3
==5144== Locks held: none
==5144==    at 0x139F0B: std::tuple_element<1ul, std::tuple<void (*)(int), int> >::type&& std::get<1ul, void (*)(int), int>(std::tuple<void (*)(int), int>&&) (tuple:1405)
==5144==    by 0x139A9C: void std::thread::_Invoker<std::tuple<void (*)(int), int> >::_M_invoke<0ul, 1ul>(std::_Index_tuple<0ul, 1ul>) (std_thread.h:259)
==5144==    by 0x13995B: std::thread::_Invoker<std::tuple<void (*)(int), int> >::operator()() (std_thread.h:266)
==5144==    by 0x139827: std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)(int), int> > >::_M_run() (std_thread.h:211)
==5144==    by 0x494F252: ??? (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.30)
==5144==    by 0x485396A: ??? (in /usr/libexec/valgrind/vgpreload_helgrind-amd64-linux.so)
==5144==    by 0x4B53AC2: start_thread (pthread_create.c:442)
==5144==    by 0x4BE4A03: clone (clone.S:100)
==5144== 
==5144== This conflicts with a previous write of size 8 by thread #2
==5144== Locks held: none
==5144==    at 0x139F0B: std::tuple_element<1ul, std::tuple<void (*)(int), int> >::type&& std::get<1ul, void (*)(int), int>(std::tuple<void (*)(int), int>&&) (tuple:1405)
==5144==    by 0x139A9C: void std::thread::_Invoker<std::tuple<void (*)(int), int> >::_M_invoke<0ul, 1ul>(std::_Index_tuple<0ul, 1ul>) (std_thread.h:259)
==5144==    by 0x13995B: std::thread::_Invoker<std::tuple<void (*)(int), int> >::operator()() (std_thread.h:266)
==5144==    by 0x139827: std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)(int), int> > >::_M_run() (std_thread.h:211)
==5144==    by 0x494F252: ??? (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.30)
==5144==    by 0x485396A: ??? (in /usr/libexec/valgrind/vgpreload_helgrind-amd64-linux.so)
==5144==    by 0x4B53AC2: start_thread (pthread_create.c:442)
==5144==    by 0x4BE4A03: clone (clone.S:100)
==5144==  Address 0x155a80 is 0 bytes inside data symbol "__gcov0._ZSt3getILm1EJPFviEiEEONSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeEOS6_"
==5144== 
==5144== ----------------------------------------------------------------
==5144== 
==5144== Possible data race during read of size 8 at 0x155840 by thread #3
==5144== Locks held: none
==5144==    at 0x13A734: int& std::__get_helper<1ul, int>(std::_Tuple_impl<1ul, int>&) (tuple:1377)
==5144==    by 0x139F1D: std::tuple_element<1ul, std::tuple<void (*)(int), int> >::type&& std::get<1ul, void (*)(int), int>(std::tuple<void (*)(int), int>&&) (tuple:1408)
==5144==    by 0x139A9C: void std::thread::_Invoker<std::tuple<void (*)(int), int> >::_M_invoke<0ul, 1ul>(std::_Index_tuple<0ul, 1ul>) (std_thread.h:259)
==5144==    by 0x13995B: std::thread::_Invoker<std::tuple<void (*)(int), int> >::operator()() (std_thread.h:266)
==5144==    by 0x139827: std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)(int), int> > >::_M_run() (std_thread.h:211)
==5144==    by 0x494F252: ??? (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.30)
==5144==    by 0x485396A: ??? (in /usr/libexec/valgrind/vgpreload_helgrind-amd64-linux.so)
==5144==    by 0x4B53AC2: start_thread (pthread_create.c:442)
==5144==    by 0x4BE4A03: clone (clone.S:100)
==5144== 
==5144== This conflicts with a previous write of size 8 by thread #2
==5144== Locks held: none
==5144==    at 0x13A73F: int& std::__get_helper<1ul, int>(std::_Tuple_impl<1ul, int>&) (tuple:1377)
==5144==    by 0x139F1D: std::tuple_element<1ul, std::tuple<void (*)(int), int> >::type&& std::get<1ul, void (*)(int), int>(std::tuple<void (*)(int), int>&&) (tuple:1408)
==5144==    by 0x139A9C: void std::thread::_Invoker<std::tuple<void (*)(int), int> >::_M_invoke<0ul, 1ul>(std::_Index_tuple<0ul, 1ul>) (std_thread.h:259)
==5144==    by 0x13995B: std::thread::_Invoker<std::tuple<void (*)(int), int> >::operator()() (std_thread.h:266)
==5144==    by 0x139827: std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)(int), int> > >::_M_run() (std_thread.h:211)
==5144==    by 0x494F252: ??? (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.30)
==5144==    by 0x485396A: ??? (in /usr/libexec/valgrind/vgpreload_helgrind-amd64-linux.so)
==5144==    by 0x4B53AC2: start_thread (pthread_create.c:442)
==5144==  Address 0x155840 is 0 bytes inside data symbol "__gcov0._ZSt12__get_helperILm1EiJEERT0_RSt11_Tuple_implIXT_EJS0_DpT1_EE"
==5144== 
==5144== ----------------------------------------------------------------
==5144== 
==5144== Possible data race during write of size 8 at 0x155840 by thread #3
==5144== Locks held: none
==5144==    at 0x13A73F: int& std::__get_helper<1ul, int>(std::_Tuple_impl<1ul, int>&) (tuple:1377)
==5144==    by 0x139F1D: std::tuple_element<1ul, std::tuple<void (*)(int), int> >::type&& std::get<1ul, void (*)(int), int>(std::tuple<void (*)(int), int>&&) (tuple:1408)
==5144==    by 0x139A9C: void std::thread::_Invoker<std::tuple<void (*)(int), int> >::_M_invoke<0ul, 1ul>(std::_Index_tuple<0ul, 1ul>) (std_thread.h:259)
==5144==    by 0x13995B: std::thread::_Invoker<std::tuple<void (*)(int), int> >::operator()() (std_thread.h:266)
==5144==    by 0x139827: std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)(int), int> > >::_M_run() (std_thread.h:211)
==5144==    by 0x494F252: ??? (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.30)
==5144==    by 0x485396A: ??? (in /usr/libexec/valgrind/vgpreload_helgrind-amd64-linux.so)
==5144==    by 0x4B53AC2: start_thread (pthread_create.c:442)
==5144==    by 0x4BE4A03: clone (clone.S:100)
==5144== 
==5144== This conflicts with a previous write of size 8 by thread #2
==5144== Locks held: none
==5144==    at 0x13A73F: int& std::__get_helper<1ul, int>(std::_Tuple_impl<1ul, int>&) (tuple:1377)
==5144==    by 0x139F1D: std::tuple_element<1ul, std::tuple<void (*)(int), int> >::type&& std::get<1ul, void (*)(int), int>(std::tuple<void (*)(int), int>&&) (tuple:1408)
==5144==    by 0x139A9C: void std::thread::_Invoker<std::tuple<void (*)(int), int> >::_M_invoke<0ul, 1ul>(std::_Index_tuple<0ul, 1ul>) (std_thread.h:259)
==5144==    by 0x13995B: std::thread::_Invoker<std::tuple<void (*)(int), int> >::operator()() (std_thread.h:266)
==5144==    by 0x139827: std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)(int), int> > >::_M_run() (std_thread.h:211)
==5144==    by 0x494F252: ??? (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.30)
==5144==    by 0x485396A: ??? (in /usr/libexec/valgrind/vgpreload_helgrind-amd64-linux.so)
==5144==    by 0x4B53AC2: start_thread (pthread_create.c:442)
==5144==  Address 0x155840 is 0 bytes inside data symbol "__gcov0._ZSt12__get_helperILm1EiJEERT0_RSt11_Tuple_implIXT_EJS0_DpT1_EE"
==5144== 
==5144== ----------------------------------------------------------------
==5144== 
==5144== Possible data race during read of size 8 at 0x155690 by thread #3
==5144== Locks held: none
==5144==    at 0x13ADF3: std::_Tuple_impl<1ul, int>::_M_head(std::_Tuple_impl<1ul, int>&) (tuple:424)
==5144==    by 0x13A751: int& std::__get_helper<1ul, int>(std::_Tuple_impl<1ul, int>&) (tuple:1378)
==5144==    by 0x139F1D: std::tuple_element<1ul, std::tuple<void (*)(int), int> >::type&& std::get<1ul, void (*)(int), int>(std::tuple<void (*)(int), int>&&) (tuple:1408)
==5144==    by 0x139A9C: void std::thread::_Invoker<std::tuple<void (*)(int), int> >::_M_invoke<0ul, 1ul>(std::_Index_tuple<0ul, 1ul>) (std_thread.h:259)
==5144==    by 0x13995B: std::thread::_Invoker<std::tuple<void (*)(int), int> >::operator()() (std_thread.h:266)
==5144==    by 0x139827: std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)(int), int> > >::_M_run() (std_thread.h:211)
==5144==    by 0x494F252: ??? (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.30)
==5144==    by 0x485396A: ??? (in /usr/libexec/valgrind/vgpreload_helgrind-amd64-linux.so)
==5144==    by 0x4B53AC2: start_thread (pthread_create.c:442)
==5144==    by 0x4BE4A03: clone (clone.S:100)
==5144== 
==5144== This conflicts with a previous write of size 8 by thread #2
==5144== Locks held: none
==5144==    at 0x13ADFE: std::_Tuple_impl<1ul, int>::_M_head(std::_Tuple_impl<1ul, int>&) (tuple:424)
==5144==    by 0x13A751: int& std::__get_helper<1ul, int>(std::_Tuple_impl<1ul, int>&) (tuple:1378)
==5144==    by 0x139F1D: std::tuple_element<1ul, std::tuple<void (*)(int), int> >::type&& std::get<1ul, void (*)(int), int>(std::tuple<void (*)(int), int>&&) (tuple:1408)
==5144==    by 0x139A9C: void std::thread::_Invoker<std::tuple<void (*)(int), int> >::_M_invoke<0ul, 1ul>(std::_Index_tuple<0ul, 1ul>) (std_thread.h:259)
==5144==    by 0x13995B: std::thread::_Invoker<std::tuple<void (*)(int), int> >::operator()() (std_thread.h:266)
==5144==    by 0x139827: std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)(int), int> > >::_M_run() (std_thread.h:211)
==5144==    by 0x494F252: ??? (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.30)
==5144==    by 0x485396A: ??? (in /usr/libexec/valgrind/vgpreload_helgrind-amd64-linux.so)
==5144==  Address 0x155690 is 0 bytes inside data symbol "__gcov0._ZNSt11_Tuple_implILm1EJiEE7_M_headERS0_"
==5144== 
==5144== ----------------------------------------------------------------
==5144== 
==5144== Possible data race during write of size 8 at 0x155690 by thread #3
==5144== Locks held: none
==5144==    at 0x13ADFE: std::_Tuple_impl<1ul, int>::_M_head(std::_Tuple_impl<1ul, int>&) (tuple:424)
==5144==    by 0x13A751: int& std::__get_helper<1ul, int>(std::_Tuple_impl<1ul, int>&) (tuple:1378)
==5144==    by 0x139F1D: std::tuple_element<1ul, std::tuple<void (*)(int), int> >::type&& std::get<1ul, void (*)(int), int>(std::tuple<void (*)(int), int>&&) (tuple:1408)
==5144==    by 0x139A9C: void std::thread::_Invoker<std::tuple<void (*)(int), int> >::_M_invoke<0ul, 1ul>(std::_Index_tuple<0ul, 1ul>) (std_thread.h:259)
==5144==    by 0x13995B: std::thread::_Invoker<std::tuple<void (*)(int), int> >::operator()() (std_thread.h:266)
==5144==    by 0x139827: std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)(int), int> > >::_M_run() (std_thread.h:211)
==5144==    by 0x494F252: ??? (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.30)
==5144==    by 0x485396A: ??? (in /usr/libexec/valgrind/vgpreload_helgrind-amd64-linux.so)
==5144==    by 0x4B53AC2: start_thread (pthread_create.c:442)
==5144==    by 0x4BE4A03: clone (clone.S:100)
==5144== 
==5144== This conflicts with a previous write of size 8 by thread #2
==5144== Locks held: none
==5144==    at 0x13ADFE: std::_Tuple_impl<1ul, int>::_M_head(std::_Tuple_impl<1ul, int>&) (tuple:424)
==5144==    by 0x13A751: int& std::__get_helper<1ul, int>(std::_Tuple_impl<1ul, int>&) (tuple:1378)
==5144==    by 0x139F1D: std::tuple_element<1ul, std::tuple<void (*)(int), int> >::type&& std::get<1ul, void (*)(int), int>(std::tuple<void (*)(int), int>&&) (tuple:1408)
==5144==    by 0x139A9C: void std::thread::_Invoker<std::tuple<void (*)(int), int> >::_M_invoke<0ul, 1ul>(std::_Index_tuple<0ul, 1ul>) (std_thread.h:259)
==5144==    by 0x13995B: std::thread::_Invoker<std::tuple<void (*)(int), int> >::operator()() (std_thread.h:266)
==5144==    by 0x139827: std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)(int), int> > >::_M_run() (std_thread.h:211)
==5144==    by 0x494F252: ??? (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.30)
==5144==    by 0x485396A: ??? (in /usr/libexec/valgrind/vgpreload_helgrind-amd64-linux.so)
==5144==  Address 0x155690 is 0 bytes inside data symbol "__gcov0._ZNSt11_Tuple_implILm1EJiEE7_M_headERS0_"
==5144== 
==5144== ----------------------------------------------------------------
==5144== 
==5144== Possible data race during read of size 8 at 0x1555E8 by thread #3
==5144== Locks held: none
==5144==    at 0x13B117: std::_Head_base<1ul, int, false>::_M_head(std::_Head_base<1ul, int, false>&) (tuple:233)
==5144==    by 0x13AE10: std::_Tuple_impl<1ul, int>::_M_head(std::_Tuple_impl<1ul, int>&) (tuple:424)
==5144==    by 0x13A751: int& std::__get_helper<1ul, int>(std::_Tuple_impl<1ul, int>&) (tuple:1378)
==5144==    by 0x139F1D: std::tuple_element<1ul, std::tuple<void (*)(int), int> >::type&& std::get<1ul, void (*)(int), int>(std::tuple<void (*)(int), int>&&) (tuple:1408)
==5144==    by 0x139A9C: void std::thread::_Invoker<std::tuple<void (*)(int), int> >::_M_invoke<0ul, 1ul>(std::_Index_tuple<0ul, 1ul>) (std_thread.h:259)
==5144==    by 0x13995B: std::thread::_Invoker<std::tuple<void (*)(int), int> >::operator()() (std_thread.h:266)
==5144==    by 0x139827: std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)(int), int> > >::_M_run() (std_thread.h:211)
==5144==    by 0x494F252: ??? (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.30)
==5144==    by 0x485396A: ??? (in /usr/libexec/valgrind/vgpreload_helgrind-amd64-linux.so)
==5144==    by 0x4B53AC2: start_thread (pthread_create.c:442)
==5144==    by 0x4BE4A03: clone (clone.S:100)
==5144== 
==5144== This conflicts with a previous write of size 8 by thread #2
==5144== Locks held: none
==5144==    at 0x13B122: std::_Head_base<1ul, int, false>::_M_head(std::_Head_base<1ul, int, false>&) (tuple:233)
==5144==    by 0x13AE10: std::_Tuple_impl<1ul, int>::_M_head(std::_Tuple_impl<1ul, int>&) (tuple:424)
==5144==    by 0x13A751: int& std::__get_helper<1ul, int>(std::_Tuple_impl<1ul, int>&) (tuple:1378)
==5144==    by 0x139F1D: std::tuple_element<1ul, std::tuple<void (*)(int), int> >::type&& std::get<1ul, void (*)(int), int>(std::tuple<void (*)(int), int>&&) (tuple:1408)
==5144==    by 0x139A9C: void std::thread::_Invoker<std::tuple<void (*)(int), int> >::_M_invoke<0ul, 1ul>(std::_Index_tuple<0ul, 1ul>) (std_thread.h:259)
==5144==    by 0x13995B: std::thread::_Invoker<std::tuple<void (*)(int), int> >::operator()() (std_thread.h:266)
==5144==    by 0x139827: std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)(int), int> > >::_M_run() (std_thread.h:211)
==5144==    by 0x494F252: ??? (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.30)
==5144==  Address 0x1555e8 is 0 bytes inside data symbol "__gcov0._ZNSt10_Head_baseILm1EiLb0EE7_M_headERS0_"
==5144== 
==5144== ----------------------------------------------------------------
==5144== 
==5144== Possible data race during write of size 8 at 0x1555E8 by thread #3
==5144== Locks held: none
==5144==    at 0x13B122: std::_Head_base<1ul, int, false>::_M_head(std::_Head_base<1ul, int, false>&) (tuple:233)
==5144==    by 0x13AE10: std::_Tuple_impl<1ul, int>::_M_head(std::_Tuple_impl<1ul, int>&) (tuple:424)
==5144==    by 0x13A751: int& std::__get_helper<1ul, int>(std::_Tuple_impl<1ul, int>&) (tuple:1378)
==5144==    by 0x139F1D: std::tuple_element<1ul, std::tuple<void (*)(int), int> >::type&& std::get<1ul, void (*)(int), int>(std::tuple<void (*)(int), int>&&) (tuple:1408)
==5144==    by 0x139A9C: void std::thread::_Invoker<std::tuple<void (*)(int), int> >::_M_invoke<0ul, 1ul>(std::_Index_tuple<0ul, 1ul>) (std_thread.h:259)
==5144==    by 0x13995B: std::thread::_Invoker<std::tuple<void (*)(int), int> >::operator()() (std_thread.h:266)
==5144==    by 0x139827: std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)(int), int> > >::_M_run() (std_thread.h:211)
==5144==    by 0x494F252: ??? (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.30)
==5144==    by 0x485396A: ??? (in /usr/libexec/valgrind/vgpreload_helgrind-amd64-linux.so)
==5144==    by 0x4B53AC2: start_thread (pthread_create.c:442)
==5144==    by 0x4BE4A03: clone (clone.S:100)
==5144== 
==5144== This conflicts with a previous write of size 8 by thread #2
==5144== Locks held: none
==5144==    at 0x13B122: std::_Head_base<1ul, int, false>::_M_head(std::_Head_base<1ul, int, false>&) (tuple:233)
==5144==    by 0x13AE10: std::_Tuple_impl<1ul, int>::_M_head(std::_Tuple_impl<1ul, int>&) (tuple:424)
==5144==    by 0x13A751: int& std::__get_helper<1ul, int>(std::_Tuple_impl<1ul, int>&) (tuple:1378)
==5144==    by 0x139F1D: std::tuple_element<1ul, std::tuple<void (*)(int), int> >::type&& std::get<1ul, void (*)(int), int>(std::tuple<void (*)(int), int>&&) (tuple:1408)
==5144==    by 0x139A9C: void std::thread::_Invoker<std::tuple<void (*)(int), int> >::_M_invoke<0ul, 1ul>(std::_Index_tuple<0ul, 1ul>) (std_thread.h:259)
==5144==    by 0x13995B: std::thread::_Invoker<std::tuple<void (*)(int), int> >::operator()() (std_thread.h:266)
==5144==    by 0x139827: std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)(int), int> > >::_M_run() (std_thread.h:211)
==5144==    by 0x494F252: ??? (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.30)
==5144==  Address 0x1555e8 is 0 bytes inside data symbol "__gcov0._ZNSt10_Head_baseILm1EiLb0EE7_M_headERS0_"
==5144== 
==5144== ----------------------------------------------------------------
==5144== 
==5144== Possible data race during read of size 8 at 0x155698 by thread #3
==5144== Locks held: none
==5144==    at 0x13AE12: std::_Tuple_impl<1ul, int>::_M_head(std::_Tuple_impl<1ul, int>&) (tuple:424)
==5144==    by 0x13A751: int& std::__get_helper<1ul, int>(std::_Tuple_impl<1ul, int>&) (tuple:1378)
==5144==    by 0x139F1D: std::tuple_element<1ul, std::tuple<void (*)(int), int> >::type&& std::get<1ul, void (*)(int), int>(std::tuple<void (*)(int), int>&&) (tuple:1408)
==5144==    by 0x139A9C: void std::thread::_Invoker<std::tuple<void (*)(int), int> >::_M_invoke<0ul, 1ul>(std::_Index_tuple<0ul, 1ul>) (std_thread.h:259)
==5144==    by 0x13995B: std::thread::_Invoker<std::tuple<void (*)(int), int> >::operator()() (std_thread.h:266)
==5144==    by 0x139827: std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)(int), int> > >::_M_run() (std_thread.h:211)
==5144==    by 0x494F252: ??? (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.30)
==5144==    by 0x485396A: ??? (in /usr/libexec/valgrind/vgpreload_helgrind-amd64-linux.so)
==5144==    by 0x4B53AC2: start_thread (pthread_create.c:442)
==5144==    by 0x4BE4A03: clone (clone.S:100)
==5144== 
==5144== This conflicts with a previous write of size 8 by thread #2
==5144== Locks held: none
==5144==    at 0x13AE1D: std::_Tuple_impl<1ul, int>::_M_head(std::_Tuple_impl<1ul, int>&) (tuple:424)
==5144==    by 0x13A751: int& std::__get_helper<1ul, int>(std::_Tuple_impl<1ul, int>&) (tuple:1378)
==5144==    by 0x139F1D: std::tuple_element<1ul, std::tuple<void (*)(int), int> >::type&& std::get<1ul, void (*)(int), int>(std::tuple<void (*)(int), int>&&) (tuple:1408)
==5144==    by 0x139A9C: void std::thread::_Invoker<std::tuple<void (*)(int), int> >::_M_invoke<0ul, 1ul>(std::_Index_tuple<0ul, 1ul>) (std_thread.h:259)
==5144==    by 0x13995B: std::thread::_Invoker<std::tuple<void (*)(int), int> >::operator()() (std_thread.h:266)
==5144==    by 0x139827: std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)(int), int> > >::_M_run() (std_thread.h:211)
==5144==    by 0x494F252: ??? (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.30)
==5144==    by 0x485396A: ??? (in /usr/libexec/valgrind/vgpreload_helgrind-amd64-linux.so)
==5144==  Address 0x155698 is 8 bytes inside data symbol "__gcov0._ZNSt11_Tuple_implILm1EJiEE7_M_headERS0_"
==5144== 
==5144== ----------------------------------------------------------------
==5144== 
==5144== Possible data race during write of size 8 at 0x155698 by thread #3
==5144== Locks held: none
==5144==    at 0x13AE1D: std::_Tuple_impl<1ul, int>::_M_head(std::_Tuple_impl<1ul, int>&) (tuple:424)
==5144==    by 0x13A751: int& std::__get_helper<1ul, int>(std::_Tuple_impl<1ul, int>&) (tuple:1378)
==5144==    by 0x139F1D: std::tuple_element<1ul, std::tuple<void (*)(int), int> >::type&& std::get<1ul, void (*)(int), int>(std::tuple<void (*)(int), int>&&) (tuple:1408)
==5144==    by 0x139A9C: void std::thread::_Invoker<std::tuple<void (*)(int), int> >::_M_invoke<0ul, 1ul>(std::_Index_tuple<0ul, 1ul>) (std_thread.h:259)
==5144==    by 0x13995B: std::thread::_Invoker<std::tuple<void (*)(int), int> >::operator()() (std_thread.h:266)
==5144==    by 0x139827: std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)(int), int> > >::_M_run() (std_thread.h:211)
==5144==    by 0x494F252: ??? (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.30)
==5144==    by 0x485396A: ??? (in /usr/libexec/valgrind/vgpreload_helgrind-amd64-linux.so)
==5144==    by 0x4B53AC2: start_thread (pthread_create.c:442)
==5144==    by 0x4BE4A03: clone (clone.S:100)
==5144== 
==5144== This conflicts with a previous write of size 8 by thread #2
==5144== Locks held: none
==5144==    at 0x13AE1D: std::_Tuple_impl<1ul, int>::_M_head(std::_Tuple_impl<1ul, int>&) (tuple:424)
==5144==    by 0x13A751: int& std::__get_helper<1ul, int>(std::_Tuple_impl<1ul, int>&) (tuple:1378)
==5144==    by 0x139F1D: std::tuple_element<1ul, std::tuple<void (*)(int), int> >::type&& std::get<1ul, void (*)(int), int>(std::tuple<void (*)(int), int>&&) (tuple:1408)
==5144==    by 0x139A9C: void std::thread::_Invoker<std::tuple<void (*)(int), int> >::_M_invoke<0ul, 1ul>(std::_Index_tuple<0ul, 1ul>) (std_thread.h:259)
==5144==    by 0x13995B: std::thread::_Invoker<std::tuple<void (*)(int), int> >::operator()() (std_thread.h:266)
==5144==    by 0x139827: std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)(int), int> > >::_M_run() (std_thread.h:211)
==5144==    by 0x494F252: ??? (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.30)
==5144==    by 0x485396A: ??? (in /usr/libexec/valgrind/vgpreload_helgrind-amd64-linux.so)
==5144==  Address 0x155698 is 8 bytes inside data symbol "__gcov0._ZNSt11_Tuple_implILm1EJiEE7_M_headERS0_"
==5144== 
==5144== ----------------------------------------------------------------
==5144== 
==5144== Possible data race during read of size 8 at 0x155848 by thread #3
==5144== Locks held: none
==5144==    at 0x13A753: int& std::__get_helper<1ul, int>(std::_Tuple_impl<1ul, int>&) (tuple:1378)
==5144==    by 0x139F1D: std::tuple_element<1ul, std::tuple<void (*)(int), int> >::type&& std::get<1ul, void (*)(int), int>(std::tuple<void (*)(int), int>&&) (tuple:1408)
==5144==    by 0x139A9C: void std::thread::_Invoker<std::tuple<void (*)(int), int> >::_M_invoke<0ul, 1ul>(std::_Index_tuple<0ul, 1ul>) (std_thread.h:259)
==5144==    by 0x13995B: std::thread::_Invoker<std::tuple<void (*)(int), int> >::operator()() (std_thread.h:266)
==5144==    by 0x139827: std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)(int), int> > >::_M_run() (std_thread.h:211)
==5144==    by 0x494F252: ??? (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.30)
==5144==    by 0x485396A: ??? (in /usr/libexec/valgrind/vgpreload_helgrind-amd64-linux.so)
==5144==    by 0x4B53AC2: start_thread (pthread_create.c:442)
==5144==    by 0x4BE4A03: clone (clone.S:100)
==5144== 
==5144== This conflicts with a previous write of size 8 by thread #2
==5144== Locks held: none
==5144==    at 0x13A75E: int& std::__get_helper<1ul, int>(std::_Tuple_impl<1ul, int>&) (tuple:1378)
==5144==    by 0x139F1D: std::tuple_element<1ul, std::tuple<void (*)(int), int> >::type&& std::get<1ul, void (*)(int), int>(std::tuple<void (*)(int), int>&&) (tuple:1408)
==5144==    by 0x139A9C: void std::thread::_Invoker<std::tuple<void (*)(int), int> >::_M_invoke<0ul, 1ul>(std::_Index_tuple<0ul, 1ul>) (std_thread.h:259)
==5144==    by 0x13995B: std::thread::_Invoker<std::tuple<void (*)(int), int> >::operator()() (std_thread.h:266)
==5144==    by 0x139827: std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)(int), int> > >::_M_run() (std_thread.h:211)
==5144==    by 0x494F252: ??? (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.30)
==5144==    by 0x485396A: ??? (in /usr/libexec/valgrind/vgpreload_helgrind-amd64-linux.so)
==5144==    by 0x4B53AC2: start_thread (pthread_create.c:442)
==5144==  Address 0x155848 is 8 bytes inside data symbol "__gcov0._ZSt12__get_helperILm1EiJEERT0_RSt11_Tuple_implIXT_EJS0_DpT1_EE"
==5144== 
==5144== ----------------------------------------------------------------
==5144== 
==5144== Possible data race during write of size 8 at 0x155848 by thread #3
==5144== Locks held: none
==5144==    at 0x13A75E: int& std::__get_helper<1ul, int>(std::_Tuple_impl<1ul, int>&) (tuple:1378)
==5144==    by 0x139F1D: std::tuple_element<1ul, std::tuple<void (*)(int), int> >::type&& std::get<1ul, void (*)(int), int>(std::tuple<void (*)(int), int>&&) (tuple:1408)
==5144==    by 0x139A9C: void std::thread::_Invoker<std::tuple<void (*)(int), int> >::_M_invoke<0ul, 1ul>(std::_Index_tuple<0ul, 1ul>) (std_thread.h:259)
==5144==    by 0x13995B: std::thread::_Invoker<std::tuple<void (*)(int), int> >::operator()() (std_thread.h:266)
==5144==    by 0x139827: std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)(int), int> > >::_M_run() (std_thread.h:211)
==5144==    by 0x494F252: ??? (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.30)
==5144==    by 0x485396A: ??? (in /usr/libexec/valgrind/vgpreload_helgrind-amd64-linux.so)
==5144==    by 0x4B53AC2: start_thread (pthread_create.c:442)
==5144==    by 0x4BE4A03: clone (clone.S:100)
==5144== 
==5144== This conflicts with a previous write of size 8 by thread #2
==5144== Locks held: none
==5144==    at 0x13A75E: int& std::__get_helper<1ul, int>(std::_Tuple_impl<1ul, int>&) (tuple:1378)
==5144==    by 0x139F1D: std::tuple_element<1ul, std::tuple<void (*)(int), int> >::type&& std::get<1ul, void (*)(int), int>(std::tuple<void (*)(int), int>&&) (tuple:1408)
==5144==    by 0x139A9C: void std::thread::_Invoker<std::tuple<void (*)(int), int> >::_M_invoke<0ul, 1ul>(std::_Index_tuple<0ul, 1ul>) (std_thread.h:259)
==5144==    by 0x13995B: std::thread::_Invoker<std::tuple<void (*)(int), int> >::operator()() (std_thread.h:266)
==5144==    by 0x139827: std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)(int), int> > >::_M_run() (std_thread.h:211)
==5144==    by 0x494F252: ??? (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.30)
==5144==    by 0x485396A: ??? (in /usr/libexec/valgrind/vgpreload_helgrind-amd64-linux.so)
==5144==    by 0x4B53AC2: start_thread (pthread_create.c:442)
==5144==  Address 0x155848 is 8 bytes inside data symbol "__gcov0._ZSt12__get_helperILm1EiJEERT0_RSt11_Tuple_implIXT_EJS0_DpT1_EE"
==5144== 
==5144== ----------------------------------------------------------------
==5144== 
==5144== Possible data race during read of size 8 at 0x155A88 by thread #3
==5144== Locks held: none
==5144==    at 0x139F1E: std::tuple_element<1ul, std::tuple<void (*)(int), int> >::type&& std::get<1ul, void (*)(int), int>(std::tuple<void (*)(int), int>&&) (tuple:1408)
==5144==    by 0x139A9C: void std::thread::_Invoker<std::tuple<void (*)(int), int> >::_M_invoke<0ul, 1ul>(std::_Index_tuple<0ul, 1ul>) (std_thread.h:259)
==5144==    by 0x13995B: std::thread::_Invoker<std::tuple<void (*)(int), int> >::operator()() (std_thread.h:266)
==5144==    by 0x139827: std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)(int), int> > >::_M_run() (std_thread.h:211)
==5144==    by 0x494F252: ??? (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.30)
==5144==    by 0x485396A: ??? (in /usr/libexec/valgrind/vgpreload_helgrind-amd64-linux.so)
==5144==    by 0x4B53AC2: start_thread (pthread_create.c:442)
==5144==    by 0x4BE4A03: clone (clone.S:100)
==5144== 
==5144== This conflicts with a previous write of size 8 by thread #2
==5144== Locks held: none
==5144==    at 0x139F29: std::tuple_element<1ul, std::tuple<void (*)(int), int> >::type&& std::get<1ul, void (*)(int), int>(std::tuple<void (*)(int), int>&&) (tuple:1408)
==5144==    by 0x139A9C: void std::thread::_Invoker<std::tuple<void (*)(int), int> >::_M_invoke<0ul, 1ul>(std::_Index_tuple<0ul, 1ul>) (std_thread.h:259)
==5144==    by 0x13995B: std::thread::_Invoker<std::tuple<void (*)(int), int> >::operator()() (std_thread.h:266)
==5144==    by 0x139827: std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)(int), int> > >::_M_run() (std_thread.h:211)
==5144==    by 0x494F252: ??? (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.30)
==5144==    by 0x485396A: ??? (in /usr/libexec/valgrind/vgpreload_helgrind-amd64-linux.so)
==5144==    by 0x4B53AC2: start_thread (pthread_create.c:442)
==5144==    by 0x4BE4A03: clone (clone.S:100)
==5144==  Address 0x155a88 is 8 bytes inside data symbol "__gcov0._ZSt3getILm1EJPFviEiEEONSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeEOS6_"
==5144== 
==5144== ----------------------------------------------------------------
==5144== 
==5144== Possible data race during write of size 8 at 0x155A88 by thread #3
==5144== Locks held: none
==5144==    at 0x139F29: std::tuple_element<1ul, std::tuple<void (*)(int), int> >::type&& std::get<1ul, void (*)(int), int>(std::tuple<void (*)(int), int>&&) (tuple:1408)
==5144==    by 0x139A9C: void std::thread::_Invoker<std::tuple<void (*)(int), int> >::_M_invoke<0ul, 1ul>(std::_Index_tuple<0ul, 1ul>) (std_thread.h:259)
==5144==    by 0x13995B: std::thread::_Invoker<std::tuple<void (*)(int), int> >::operator()() (std_thread.h:266)
==5144==    by 0x139827: std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)(int), int> > >::_M_run() (std_thread.h:211)
==5144==    by 0x494F252: ??? (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.30)
==5144==    by 0x485396A: ??? (in /usr/libexec/valgrind/vgpreload_helgrind-amd64-linux.so)
==5144==    by 0x4B53AC2: start_thread (pthread_create.c:442)
==5144==    by 0x4BE4A03: clone (clone.S:100)
==5144== 
==5144== This conflicts with a previous write of size 8 by thread #2
==5144== Locks held: none
==5144==    at 0x139F29: std::tuple_element<1ul, std::tuple<void (*)(int), int> >::type&& std::get<1ul, void (*)(int), int>(std::tuple<void (*)(int), int>&&) (tuple:1408)
==5144==    by 0x139A9C: void std::thread::_Invoker<std::tuple<void (*)(int), int> >::_M_invoke<0ul, 1ul>(std::_Index_tuple<0ul, 1ul>) (std_thread.h:259)
==5144==    by 0x13995B: std::thread::_Invoker<std::tuple<void (*)(int), int> >::operator()() (std_thread.h:266)
==5144==    by 0x139827: std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)(int), int> > >::_M_run() (std_thread.h:211)
==5144==    by 0x494F252: ??? (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.30)
==5144==    by 0x485396A: ??? (in /usr/libexec/valgrind/vgpreload_helgrind-amd64-linux.so)
==5144==    by 0x4B53AC2: start_thread (pthread_create.c:442)
==5144==    by 0x4BE4A03: clone (clone.S:100)
==5144==  Address 0x155a88 is 8 bytes inside data symbol "__gcov0._ZSt3getILm1EJPFviEiEEONSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeEOS6_"
==5144== 
==5144== ----------------------------------------------------------------
==5144== 
==5144== Possible data race during read of size 8 at 0x15A560 by thread #3
==5144== Locks held: none
==5144==    at 0x124C4B: int&& std::forward<int>(std::remove_reference<int>::type&) (move.h:77)
==5144==    by 0x139F37: std::tuple_element<1ul, std::tuple<void (*)(int), int> >::type&& std::get<1ul, void (*)(int), int>(std::tuple<void (*)(int), int>&&) (tuple:1408)
==5144==    by 0x139A9C: void std::thread::_Invoker<std::tuple<void (*)(int), int> >::_M_invoke<0ul, 1ul>(std::_Index_tuple<0ul, 1ul>) (std_thread.h:259)
==5144==    by 0x13995B: std::thread::_Invoker<std::tuple<void (*)(int), int> >::operator()() (std_thread.h:266)
==5144==    by 0x139827: std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)(int), int> > >::_M_run() (std_thread.h:211)
==5144==    by 0x494F252: ??? (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.30)
==5144==    by 0x485396A: ??? (in /usr/libexec/valgrind/vgpreload_helgrind-amd64-linux.so)
==5144==    by 0x4B53AC2: start_thread (pthread_create.c:442)
==5144==    by 0x4BE4A03: clone (clone.S:100)
==5144== 
==5144== This conflicts with a previous write of size 8 by thread #1
==5144== Locks held: none
==5144==    at 0x124C56: int&& std::forward<int>(std::remove_reference<int>::type&) (move.h:77)
==5144==    by 0x12685F: std::thread& std::vector<std::thread, std::allocator<std::thread> >::emplace_back<void (&)(int), int>(void (&)(int), int&&) (vector.tcc:121)
==5144==    by 0x121036: main (main.cpp:359)
==5144==  Address 0x15a560 is 0 bytes inside data symbol "__gcov0._ZSt7forwardIiEOT_RNSt16remove_referenceIS0_E4typeE"
==5144== 
==5144== ----------------------------------------------------------------
==5144== 
==5144== Possible data race during write of size 8 at 0x15A560 by thread #3
==5144== Locks held: none
==5144==    at 0x124C56: int&& std::forward<int>(std::remove_reference<int>::type&) (move.h:77)
==5144==    by 0x139F37: std::tuple_element<1ul, std::tuple<void (*)(int), int> >::type&& std::get<1ul, void (*)(int), int>(std::tuple<void (*)(int), int>&&) (tuple:1408)
==5144==    by 0x139A9C: void std::thread::_Invoker<std::tuple<void (*)(int), int> >::_M_invoke<0ul, 1ul>(std::_Index_tuple<0ul, 1ul>) (std_thread.h:259)
==5144==    by 0x13995B: std::thread::_Invoker<std::tuple<void (*)(int), int> >::operator()() (std_thread.h:266)
==5144==    by 0x139827: std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)(int), int> > >::_M_run() (std_thread.h:211)
==5144==    by 0x494F252: ??? (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.30)
==5144==    by 0x485396A: ??? (in /usr/libexec/valgrind/vgpreload_helgrind-amd64-linux.so)
==5144==    by 0x4B53AC2: start_thread (pthread_create.c:442)
==5144==    by 0x4BE4A03: clone (clone.S:100)
==5144== 
==5144== This conflicts with a previous write of size 8 by thread #1
==5144== Locks held: none
==5144==    at 0x124C56: int&& std::forward<int>(std::remove_reference<int>::type&) (move.h:77)
==5144==    by 0x12685F: std::thread& std::vector<std::thread, std::allocator<std::thread> >::emplace_back<void (&)(int), int>(void (&)(int), int&&) (vector.tcc:121)
==5144==    by 0x121036: main (main.cpp:359)
==5144==  Address 0x15a560 is 0 bytes inside data symbol "__gcov0._ZSt7forwardIiEOT_RNSt16remove_referenceIS0_E4typeE"
==5144== 
==5144== ----------------------------------------------------------------
==5144== 
==5144== Possible data race during read of size 8 at 0x155A90 by thread #3
==5144== Locks held: none
==5144==    at 0x139F39: std::tuple_element<1ul, std::tuple<void (*)(int), int> >::type&& std::get<1ul, void (*)(int), int>(std::tuple<void (*)(int), int>&&) (tuple:1408)
==5144==    by 0x139A9C: void std::thread::_Invoker<std::tuple<void (*)(int), int> >::_M_invoke<0ul, 1ul>(std::_Index_tuple<0ul, 1ul>) (std_thread.h:259)
==5144==    by 0x13995B: std::thread::_Invoker<std::tuple<void (*)(int), int> >::operator()() (std_thread.h:266)
==5144==    by 0x139827: std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)(int), int> > >::_M_run() (std_thread.h:211)
==5144==    by 0x494F252: ??? (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.30)
==5144==    by 0x485396A: ??? (in /usr/libexec/valgrind/vgpreload_helgrind-amd64-linux.so)
==5144==    by 0x4B53AC2: start_thread (pthread_create.c:442)
==5144==    by 0x4BE4A03: clone (clone.S:100)
==5144== 
==5144== This conflicts with a previous write of size 8 by thread #2
==5144== Locks held: none
==5144==    at 0x139F44: std::tuple_element<1ul, std::tuple<void (*)(int), int> >::type&& std::get<1ul, void (*)(int), int>(std::tuple<void (*)(int), int>&&) (tuple:1408)
==5144==    by 0x139A9C: void std::thread::_Invoker<std::tuple<void (*)(int), int> >::_M_invoke<0ul, 1ul>(std::_Index_tuple<0ul, 1ul>) (std_thread.h:259)
==5144==    by 0x13995B: std::thread::_Invoker<std::tuple<void (*)(int), int> >::operator()() (std_thread.h:266)
==5144==    by 0x139827: std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)(int), int> > >::_M_run() (std_thread.h:211)
==5144==    by 0x494F252: ??? (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.30)
==5144==    by 0x485396A: ??? (in /usr/libexec/valgrind/vgpreload_helgrind-amd64-linux.so)
==5144==    by 0x4B53AC2: start_thread (pthread_create.c:442)
==5144==    by 0x4BE4A03: clone (clone.S:100)
==5144==  Address 0x155a90 is 16 bytes inside data symbol "__gcov0._ZSt3getILm1EJPFviEiEEONSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeEOS6_"
==5144== 
==5144== ----------------------------------------------------------------
==5144== 
==5144== Possible data race during write of size 8 at 0x155A90 by thread #3
==5144== Locks held: none
==5144==    at 0x139F44: std::tuple_element<1ul, std::tuple<void (*)(int), int> >::type&& std::get<1ul, void (*)(int), int>(std::tuple<void (*)(int), int>&&) (tuple:1408)
==5144==    by 0x139A9C: void std::thread::_Invoker<std::tuple<void (*)(int), int> >::_M_invoke<0ul, 1ul>(std::_Index_tuple<0ul, 1ul>) (std_thread.h:259)
==5144==    by 0x13995B: std::thread::_Invoker<std::tuple<void (*)(int), int> >::operator()() (std_thread.h:266)
==5144==    by 0x139827: std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)(int), int> > >::_M_run() (std_thread.h:211)
==5144==    by 0x494F252: ??? (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.30)
==5144==    by 0x485396A: ??? (in /usr/libexec/valgrind/vgpreload_helgrind-amd64-linux.so)
==5144==    by 0x4B53AC2: start_thread (pthread_create.c:442)
==5144==    by 0x4BE4A03: clone (clone.S:100)
==5144== 
==5144== This conflicts with a previous write of size 8 by thread #2
==5144== Locks held: none
==5144==    at 0x139F44: std::tuple_element<1ul, std::tuple<void (*)(int), int> >::type&& std::get<1ul, void (*)(int), int>(std::tuple<void (*)(int), int>&&) (tuple:1408)
==5144==    by 0x139A9C: void std::thread::_Invoker<std::tuple<void (*)(int), int> >::_M_invoke<0ul, 1ul>(std::_Index_tuple<0ul, 1ul>) (std_thread.h:259)
==5144==    by 0x13995B: std::thread::_Invoker<std::tuple<void (*)(int), int> >::operator()() (std_thread.h:266)
==5144==    by 0x139827: std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)(int), int> > >::_M_run() (std_thread.h:211)
==5144==    by 0x494F252: ??? (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.30)
==5144==    by 0x485396A: ??? (in /usr/libexec/valgrind/vgpreload_helgrind-amd64-linux.so)
==5144==    by 0x4B53AC2: start_thread (pthread_create.c:442)
==5144==    by 0x4BE4A03: clone (clone.S:100)
==5144==  Address 0x155a90 is 16 bytes inside data symbol "__gcov0._ZSt3getILm1EJPFviEiEEONSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeEOS6_"
==5144== 
==5144== ----------------------------------------------------------------
==5144== 
==5144== Possible data race during read of size 8 at 0x155BB0 by thread #3
==5144== Locks held: none
==5144==    at 0x139AA0: void std::thread::_Invoker<std::tuple<void (*)(int), int> >::_M_invoke<0ul, 1ul>(std::_Index_tuple<0ul, 1ul>) (std_thread.h:259)
==5144==    by 0x13995B: std::thread::_Invoker<std::tuple<void (*)(int), int> >::operator()() (std_thread.h:266)
==5144==    by 0x139827: std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)(int), int> > >::_M_run() (std_thread.h:211)
==5144==    by 0x494F252: ??? (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.30)
==5144==    by 0x485396A: ??? (in /usr/libexec/valgrind/vgpreload_helgrind-amd64-linux.so)
==5144==    by 0x4B53AC2: start_thread (pthread_create.c:442)
==5144==    by 0x4BE4A03: clone (clone.S:100)
==5144== 
==5144== This conflicts with a previous write of size 8 by thread #2
==5144== Locks held: none
==5144==    at 0x139AAB: void std::thread::_Invoker<std::tuple<void (*)(int), int> >::_M_invoke<0ul, 1ul>(std::_Index_tuple<0ul, 1ul>) (std_thread.h:259)
==5144==    by 0x13995B: std::thread::_Invoker<std::tuple<void (*)(int), int> >::operator()() (std_thread.h:266)
==5144==    by 0x139827: std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)(int), int> > >::_M_run() (std_thread.h:211)
==5144==    by 0x494F252: ??? (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.30)
==5144==    by 0x485396A: ??? (in /usr/libexec/valgrind/vgpreload_helgrind-amd64-linux.so)
==5144==    by 0x4B53AC2: start_thread (pthread_create.c:442)
==5144==    by 0x4BE4A03: clone (clone.S:100)
==5144==  Address 0x155bb0 is 16 bytes inside data symbol "__gcov0._ZNSt6thread8_InvokerISt5tupleIJPFviEiEEE9_M_invokeIJLm0ELm1EEEEvSt12_Index_tupleIJXspT_EEE"
==5144== 
==5144== ----------------------------------------------------------------
==5144== 
==5144== Possible data race during write of size 8 at 0x155BB0 by thread #3
==5144== Locks held: none
==5144==    at 0x139AAB: void std::thread::_Invoker<std::tuple<void (*)(int), int> >::_M_invoke<0ul, 1ul>(std::_Index_tuple<0ul, 1ul>) (std_thread.h:259)
==5144==    by 0x13995B: std::thread::_Invoker<std::tuple<void (*)(int), int> >::operator()() (std_thread.h:266)
==5144==    by 0x139827: std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)(int), int> > >::_M_run() (std_thread.h:211)
==5144==    by 0x494F252: ??? (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.30)
==5144==    by 0x485396A: ??? (in /usr/libexec/valgrind/vgpreload_helgrind-amd64-linux.so)
==5144==    by 0x4B53AC2: start_thread (pthread_create.c:442)
==5144==    by 0x4BE4A03: clone (clone.S:100)
==5144== 
==5144== This conflicts with a previous write of size 8 by thread #2
==5144== Locks held: none
==5144==    at 0x139AAB: void std::thread::_Invoker<std::tuple<void (*)(int), int> >::_M_invoke<0ul, 1ul>(std::_Index_tuple<0ul, 1ul>) (std_thread.h:259)
==5144==    by 0x13995B: std::thread::_Invoker<std::tuple<void (*)(int), int> >::operator()() (std_thread.h:266)
==5144==    by 0x139827: std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)(int), int> > >::_M_run() (std_thread.h:211)
==5144==    by 0x494F252: ??? (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.30)
==5144==    by 0x485396A: ??? (in /usr/libexec/valgrind/vgpreload_helgrind-amd64-linux.so)
==5144==    by 0x4B53AC2: start_thread (pthread_create.c:442)
==5144==    by 0x4BE4A03: clone (clone.S:100)
==5144==  Address 0x155bb0 is 16 bytes inside data symbol "__gcov0._ZNSt6thread8_InvokerISt5tupleIJPFviEiEEE9_M_invokeIJLm0ELm1EEEEvSt12_Index_tupleIJXspT_EEE"
==5144== 
==5144== ----------------------------------------------------------------
==5144== 
==5144== Possible data race during read of size 8 at 0x155BB8 by thread #3
==5144== Locks held: none
==5144==    at 0x139ABE: void std::thread::_Invoker<std::tuple<void (*)(int), int> >::_M_invoke<0ul, 1ul>(std::_Index_tuple<0ul, 1ul>) (std_thread.h:259)
==5144==    by 0x13995B: std::thread::_Invoker<std::tuple<void (*)(int), int> >::operator()() (std_thread.h:266)
==5144==    by 0x139827: std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)(int), int> > >::_M_run() (std_thread.h:211)
==5144==    by 0x494F252: ??? (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.30)
==5144==    by 0x485396A: ??? (in /usr/libexec/valgrind/vgpreload_helgrind-amd64-linux.so)
==5144==    by 0x4B53AC2: start_thread (pthread_create.c:442)
==5144==    by 0x4BE4A03: clone (clone.S:100)
==5144== 
==5144== This conflicts with a previous write of size 8 by thread #2
==5144== Locks held: none
==5144==    at 0x139AC9: void std::thread::_Invoker<std::tuple<void (*)(int), int> >::_M_invoke<0ul, 1ul>(std::_Index_tuple<0ul, 1ul>) (std_thread.h:259)
==5144==    by 0x13995B: std::thread::_Invoker<std::tuple<void (*)(int), int> >::operator()() (std_thread.h:266)
==5144==    by 0x139827: std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)(int), int> > >::_M_run() (std_thread.h:211)
==5144==    by 0x494F252: ??? (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.30)
==5144==    by 0x485396A: ??? (in /usr/libexec/valgrind/vgpreload_helgrind-amd64-linux.so)
==5144==    by 0x4B53AC2: start_thread (pthread_create.c:442)
==5144==    by 0x4BE4A03: clone (clone.S:100)
==5144==  Address 0x155bb8 is 24 bytes inside data symbol "__gcov0._ZNSt6thread8_InvokerISt5tupleIJPFviEiEEE9_M_invokeIJLm0ELm1EEEEvSt12_Index_tupleIJXspT_EEE"
==5144== 
==5144== ----------------------------------------------------------------
==5144== 
==5144== Possible data race during write of size 8 at 0x155BB8 by thread #3
==5144== Locks held: none
==5144==    at 0x139AC9: void std::thread::_Invoker<std::tuple<void (*)(int), int> >::_M_invoke<0ul, 1ul>(std::_Index_tuple<0ul, 1ul>) (std_thread.h:259)
==5144==    by 0x13995B: std::thread::_Invoker<std::tuple<void (*)(int), int> >::operator()() (std_thread.h:266)
==5144==    by 0x139827: std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)(int), int> > >::_M_run() (std_thread.h:211)
==5144==    by 0x494F252: ??? (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.30)
==5144==    by 0x485396A: ??? (in /usr/libexec/valgrind/vgpreload_helgrind-amd64-linux.so)
==5144==    by 0x4B53AC2: start_thread (pthread_create.c:442)
==5144==    by 0x4BE4A03: clone (clone.S:100)
==5144== 
==5144== This conflicts with a previous write of size 8 by thread #2
==5144== Locks held: none
==5144==    at 0x139AC9: void std::thread::_Invoker<std::tuple<void (*)(int), int> >::_M_invoke<0ul, 1ul>(std::_Index_tuple<0ul, 1ul>) (std_thread.h:259)
==5144==    by 0x13995B: std::thread::_Invoker<std::tuple<void (*)(int), int> >::operator()() (std_thread.h:266)
==5144==    by 0x139827: std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)(int), int> > >::_M_run() (std_thread.h:211)
==5144==    by 0x494F252: ??? (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.30)
==5144==    by 0x485396A: ??? (in /usr/libexec/valgrind/vgpreload_helgrind-amd64-linux.so)
==5144==    by 0x4B53AC2: start_thread (pthread_create.c:442)
==5144==    by 0x4BE4A03: clone (clone.S:100)
==5144==  Address 0x155bb8 is 24 bytes inside data symbol "__gcov0._ZNSt6thread8_InvokerISt5tupleIJPFviEiEEE9_M_invokeIJLm0ELm1EEEEvSt12_Index_tupleIJXspT_EEE"
==5144== 
==5144== ----------------------------------------------------------------
==5144== 
==5144== Possible data race during read of size 8 at 0x155AA0 by thread #3
==5144== Locks held: none
==5144==    at 0x139E9D: std::tuple_element<0ul, std::tuple<void (*)(int), int> >::type&& std::get<0ul, void (*)(int), int>(std::tuple<void (*)(int), int>&&) (tuple:1405)
==5144==    by 0x139AD7: void std::thread::_Invoker<std::tuple<void (*)(int), int> >::_M_invoke<0ul, 1ul>(std::_Index_tuple<0ul, 1ul>) (std_thread.h:259)
==5144==    by 0x13995B: std::thread::_Invoker<std::tuple<void (*)(int), int> >::operator()() (std_thread.h:266)
==5144==    by 0x139827: std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)(int), int> > >::_M_run() (std_thread.h:211)
==5144==    by 0x494F252: ??? (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.30)
==5144==    by 0x485396A: ??? (in /usr/libexec/valgrind/vgpreload_helgrind-amd64-linux.so)
==5144==    by 0x4B53AC2: start_thread (pthread_create.c:442)
==5144==    by 0x4BE4A03: clone (clone.S:100)
==5144== 
==5144== This conflicts with a previous write of size 8 by thread #2
==5144== Locks held: none
==5144==    at 0x139EA8: std::tuple_element<0ul, std::tuple<void (*)(int), int> >::type&& std::get<0ul, void (*)(int), int>(std::tuple<void (*)(int), int>&&) (tuple:1405)
==5144==    by 0x139AD7: void std::thread::_Invoker<std::tuple<void (*)(int), int> >::_M_invoke<0ul, 1ul>(std::_Index_tuple<0ul, 1ul>) (std_thread.h:259)
==5144==    by 0x13995B: std::thread::_Invoker<std::tuple<void (*)(int), int> >::operator()() (std_thread.h:266)
==5144==    by 0x139827: std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)(int), int> > >::_M_run() (std_thread.h:211)
==5144==    by 0x494F252: ??? (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.30)
==5144==    by 0x485396A: ??? (in /usr/libexec/valgrind/vgpreload_helgrind-amd64-linux.so)
==5144==    by 0x4B53AC2: start_thread (pthread_create.c:442)
==5144==    by 0x4BE4A03: clone (clone.S:100)
==5144==  Address 0x155aa0 is 0 bytes inside data symbol "__gcov0._ZSt3getILm0EJPFviEiEEONSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeEOS6_"
==5144== 
==5144== ----------------------------------------------------------------
==5144== 
==5144== Possible data race during write of size 8 at 0x155AA0 by thread #3
==5144== Locks held: none
==5144==    at 0x139EA8: std::tuple_element<0ul, std::tuple<void (*)(int), int> >::type&& std::get<0ul, void (*)(int), int>(std::tuple<void (*)(int), int>&&) (tuple:1405)
==5144==    by 0x139AD7: void std::thread::_Invoker<std::tuple<void (*)(int), int> >::_M_invoke<0ul, 1ul>(std::_Index_tuple<0ul, 1ul>) (std_thread.h:259)
==5144==    by 0x13995B: std::thread::_Invoker<std::tuple<void (*)(int), int> >::operator()() (std_thread.h:266)
==5144==    by 0x139827: std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)(int), int> > >::_M_run() (std_thread.h:211)
==5144==    by 0x494F252: ??? (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.30)
==5144==    by 0x485396A: ??? (in /usr/libexec/valgrind/vgpreload_helgrind-amd64-linux.so)
==5144==    by 0x4B53AC2: start_thread (pthread_create.c:442)
==5144==    by 0x4BE4A03: clone (clone.S:100)
==5144== 
==5144== This conflicts with a previous write of size 8 by thread #2
==5144== Locks held: none
==5144==    at 0x139EA8: std::tuple_element<0ul, std::tuple<void (*)(int), int> >::type&& std::get<0ul, void (*)(int), int>(std::tuple<void (*)(int), int>&&) (tuple:1405)
==5144==    by 0x139AD7: void std::thread::_Invoker<std::tuple<void (*)(int), int> >::_M_invoke<0ul, 1ul>(std::_Index_tuple<0ul, 1ul>) (std_thread.h:259)
==5144==    by 0x13995B: std::thread::_Invoker<std::tuple<void (*)(int), int> >::operator()() (std_thread.h:266)
==5144==    by 0x139827: std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)(int), int> > >::_M_run() (std_thread.h:211)
==5144==    by 0x494F252: ??? (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.30)
==5144==    by 0x485396A: ??? (in /usr/libexec/valgrind/vgpreload_helgrind-amd64-linux.so)
==5144==    by 0x4B53AC2: start_thread (pthread_create.c:442)
==5144==    by 0x4BE4A03: clone (clone.S:100)
==5144==  Address 0x155aa0 is 0 bytes inside data symbol "__gcov0._ZSt3getILm0EJPFviEiEEONSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeEOS6_"
==5144== 
==5144== ----------------------------------------------------------------
==5144== 
==5144== Possible data race during read of size 8 at 0x155860 by thread #3
==5144== Locks held: none
==5144==    at 0x13A6BD: void (*&std::__get_helper<0ul, void (*)(int), int>(std::_Tuple_impl<0ul, void (*)(int), int>&))(int) (tuple:1377)
==5144==    by 0x139EBA: std::tuple_element<0ul, std::tuple<void (*)(int), int> >::type&& std::get<0ul, void (*)(int), int>(std::tuple<void (*)(int), int>&&) (tuple:1408)
==5144==    by 0x139AD7: void std::thread::_Invoker<std::tuple<void (*)(int), int> >::_M_invoke<0ul, 1ul>(std::_Index_tuple<0ul, 1ul>) (std_thread.h:259)
==5144==    by 0x13995B: std::thread::_Invoker<std::tuple<void (*)(int), int> >::operator()() (std_thread.h:266)
==5144==    by 0x139827: std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)(int), int> > >::_M_run() (std_thread.h:211)
==5144==    by 0x494F252: ??? (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.30)
==5144==    by 0x485396A: ??? (in /usr/libexec/valgrind/vgpreload_helgrind-amd64-linux.so)
==5144==    by 0x4B53AC2: start_thread (pthread_create.c:442)
==5144==    by 0x4BE4A03: clone (clone.S:100)
==5144== 
==5144== This conflicts with a previous write of size 8 by thread #2
==5144== Locks held: none
==5144==    at 0x13A6C8: void (*&std::__get_helper<0ul, void (*)(int), int>(std::_Tuple_impl<0ul, void (*)(int), int>&))(int) (tuple:1377)
==5144==    by 0x139EBA: std::tuple_element<0ul, std::tuple<void (*)(int), int> >::type&& std::get<0ul, void (*)(int), int>(std::tuple<void (*)(int), int>&&) (tuple:1408)
==5144==    by 0x139AD7: void std::thread::_Invoker<std::tuple<void (*)(int), int> >::_M_invoke<0ul, 1ul>(std::_Index_tuple<0ul, 1ul>) (std_thread.h:259)
==5144==    by 0x13995B: std::thread::_Invoker<std::tuple<void (*)(int), int> >::operator()() (std_thread.h:266)
==5144==    by 0x139827: std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)(int), int> > >::_M_run() (std_thread.h:211)
==5144==    by 0x494F252: ??? (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.30)
==5144==    by 0x485396A: ??? (in /usr/libexec/valgrind/vgpreload_helgrind-amd64-linux.so)
==5144==    by 0x4B53AC2: start_thread (pthread_create.c:442)
==5144==  Address 0x155860 is 0 bytes inside data symbol "__gcov0._ZSt12__get_helperILm0EPFviEJiEERT0_RSt11_Tuple_implIXT_EJS2_DpT1_EE"
==5144== 
==5144== ----------------------------------------------------------------
==5144== 
==5144== Possible data race during write of size 8 at 0x155860 by thread #3
==5144== Locks held: none
==5144==    at 0x13A6C8: void (*&std::__get_helper<0ul, void (*)(int), int>(std::_Tuple_impl<0ul, void (*)(int), int>&))(int) (tuple:1377)
==5144==    by 0x139EBA: std::tuple_element<0ul, std::tuple<void (*)(int), int> >::type&& std::get<0ul, void (*)(int), int>(std::tuple<void (*)(int), int>&&) (tuple:1408)
==5144==    by 0x139AD7: void std::thread::_Invoker<std::tuple<void (*)(int), int> >::_M_invoke<0ul, 1ul>(std::_Index_tuple<0ul, 1ul>) (std_thread.h:259)
==5144==    by 0x13995B: std::thread::_Invoker<std::tuple<void (*)(int), int> >::operator()() (std_thread.h:266)
==5144==    by 0x139827: std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)(int), int> > >::_M_run() (std_thread.h:211)
==5144==    by 0x494F252: ??? (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.30)
==5144==    by 0x485396A: ??? (in /usr/libexec/valgrind/vgpreload_helgrind-amd64-linux.so)
==5144==    by 0x4B53AC2: start_thread (pthread_create.c:442)
==5144==    by 0x4BE4A03: clone (clone.S:100)
==5144== 
==5144== This conflicts with a previous write of size 8 by thread #2
==5144== Locks held: none
==5144==    at 0x13A6C8: void (*&std::__get_helper<0ul, void (*)(int), int>(std::_Tuple_impl<0ul, void (*)(int), int>&))(int) (tuple:1377)
==5144==    by 0x139EBA: std::tuple_element<0ul, std::tuple<void (*)(int), int> >::type&& std::get<0ul, void (*)(int), int>(std::tuple<void (*)(int), int>&&) (tuple:1408)
==5144==    by 0x139AD7: void std::thread::_Invoker<std::tuple<void (*)(int), int> >::_M_invoke<0ul, 1ul>(std::_Index_tuple<0ul, 1ul>) (std_thread.h:259)
==5144==    by 0x13995B: std::thread::_Invoker<std::tuple<void (*)(int), int> >::operator()() (std_thread.h:266)
==5144==    by 0x139827: std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)(int), int> > >::_M_run() (std_thread.h:211)
==5144==    by 0x494F252: ??? (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.30)
==5144==    by 0x485396A: ??? (in /usr/libexec/valgrind/vgpreload_helgrind-amd64-linux.so)
==5144==    by 0x4B53AC2: start_thread (pthread_create.c:442)
==5144==  Address 0x155860 is 0 bytes inside data symbol "__gcov0._ZSt12__get_helperILm0EPFviEJiEERT0_RSt11_Tuple_implIXT_EJS2_DpT1_EE"
==5144== 
==5144== ----------------------------------------------------------------
==5144== 
==5144== Possible data race during read of size 8 at 0x1556A0 by thread #3
==5144== Locks held: none
==5144==    at 0x13ADA6: std::_Tuple_impl<0ul, void (*)(int), int>::_M_head(std::_Tuple_impl<0ul, void (*)(int), int>&) (tuple:268)
==5144==    by 0x13A6DA: void (*&std::__get_helper<0ul, void (*)(int), int>(std::_Tuple_impl<0ul, void (*)(int), int>&))(int) (tuple:1378)
==5144==    by 0x139EBA: std::tuple_element<0ul, std::tuple<void (*)(int), int> >::type&& std::get<0ul, void (*)(int), int>(std::tuple<void (*)(int), int>&&) (tuple:1408)
==5144==    by 0x139AD7: void std::thread::_Invoker<std::tuple<void (*)(int), int> >::_M_invoke<0ul, 1ul>(std::_Index_tuple<0ul, 1ul>) (std_thread.h:259)
==5144==    by 0x13995B: std::thread::_Invoker<std::tuple<void (*)(int), int> >::operator()() (std_thread.h:266)
==5144==    by 0x139827: std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)(int), int> > >::_M_run() (std_thread.h:211)
==5144==    by 0x494F252: ??? (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.30)
==5144==    by 0x485396A: ??? (in /usr/libexec/valgrind/vgpreload_helgrind-amd64-linux.so)
==5144==    by 0x4B53AC2: start_thread (pthread_create.c:442)
==5144==    by 0x4BE4A03: clone (clone.S:100)
==5144== 
==5144== This conflicts with a previous write of size 8 by thread #2
==5144== Locks held: none
==5144==    at 0x13ADB1: std::_Tuple_impl<0ul, void (*)(int), int>::_M_head(std::_Tuple_impl<0ul, void (*)(int), int>&) (tuple:268)
==5144==    by 0x13A6DA: void (*&std::__get_helper<0ul, void (*)(int), int>(std::_Tuple_impl<0ul, void (*)(int), int>&))(int) (tuple:1378)
==5144==    by 0x139EBA: std::tuple_element<0ul, std::tuple<void (*)(int), int> >::type&& std::get<0ul, void (*)(int), int>(std::tuple<void (*)(int), int>&&) (tuple:1408)
==5144==    by 0x139AD7: void std::thread::_Invoker<std::tuple<void (*)(int), int> >::_M_invoke<0ul, 1ul>(std::_Index_tuple<0ul, 1ul>) (std_thread.h:259)
==5144==    by 0x13995B: std::thread::_Invoker<std::tuple<void (*)(int), int> >::operator()() (std_thread.h:266)
==5144==    by 0x139827: std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)(int), int> > >::_M_run() (std_thread.h:211)
==5144==    by 0x494F252: ??? (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.30)
==5144==    by 0x485396A: ??? (in /usr/libexec/valgrind/vgpreload_helgrind-amd64-linux.so)
==5144==  Address 0x1556a0 is 0 bytes inside data symbol "__gcov0._ZNSt11_Tuple_implILm0EJPFviEiEE7_M_headERS2_"
==5144== 
==5144== ----------------------------------------------------------------
==5144== 
==5144== Possible data race during write of size 8 at 0x1556A0 by thread #3
==5144== Locks held: none
==5144==    at 0x13ADB1: std::_Tuple_impl<0ul, void (*)(int), int>::_M_head(std::_Tuple_impl<0ul, void (*)(int), int>&) (tuple:268)
==5144==    by 0x13A6DA: void (*&std::__get_helper<0ul, void (*)(int), int>(std::_Tuple_impl<0ul, void (*)(int), int>&))(int) (tuple:1378)
==5144==    by 0x139EBA: std::tuple_element<0ul, std::tuple<void (*)(int), int> >::type&& std::get<0ul, void (*)(int), int>(std::tuple<void (*)(int), int>&&) (tuple:1408)
==5144==    by 0x139AD7: void std::thread::_Invoker<std::tuple<void (*)(int), int> >::_M_invoke<0ul, 1ul>(std::_Index_tuple<0ul, 1ul>) (std_thread.h:259)
==5144==    by 0x13995B: std::thread::_Invoker<std::tuple<void (*)(int), int> >::operator()() (std_thread.h:266)
==5144==    by 0x139827: std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)(int), int> > >::_M_run() (std_thread.h:211)
==5144==    by 0x494F252: ??? (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.30)
==5144==    by 0x485396A: ??? (in /usr/libexec/valgrind/vgpreload_helgrind-amd64-linux.so)
==5144==    by 0x4B53AC2: start_thread (pthread_create.c:442)
==5144==    by 0x4BE4A03: clone (clone.S:100)
==5144== 
==5144== This conflicts with a previous write of size 8 by thread #2
==5144== Locks held: none
==5144==    at 0x13ADB1: std::_Tuple_impl<0ul, void (*)(int), int>::_M_head(std::_Tuple_impl<0ul, void (*)(int), int>&) (tuple:268)
==5144==    by 0x13A6DA: void (*&std::__get_helper<0ul, void (*)(int), int>(std::_Tuple_impl<0ul, void (*)(int), int>&))(int) (tuple:1378)
==5144==    by 0x139EBA: std::tuple_element<0ul, std::tuple<void (*)(int), int> >::type&& std::get<0ul, void (*)(int), int>(std::tuple<void (*)(int), int>&&) (tuple:1408)
==5144==    by 0x139AD7: void std::thread::_Invoker<std::tuple<void (*)(int), int> >::_M_invoke<0ul, 1ul>(std::_Index_tuple<0ul, 1ul>) (std_thread.h:259)
==5144==    by 0x13995B: std::thread::_Invoker<std::tuple<void (*)(int), int> >::operator()() (std_thread.h:266)
==5144==    by 0x139827: std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)(int), int> > >::_M_run() (std_thread.h:211)
==5144==    by 0x494F252: ??? (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.30)
==5144==    by 0x485396A: ??? (in /usr/libexec/valgrind/vgpreload_helgrind-amd64-linux.so)
==5144==  Address 0x1556a0 is 0 bytes inside data symbol "__gcov0._ZNSt11_Tuple_implILm0EJPFviEiEE7_M_headERS2_"
==5144== 
==5144== ----------------------------------------------------------------
==5144== 
==5144== Possible data race during read of size 8 at 0x1555F0 by thread #3
==5144== Locks held: none
==5144==    at 0x13B0E9: std::_Head_base<0ul, void (*)(int), false>::_M_head(std::_Head_base<0ul, void (*)(int), false>&) (tuple:233)
==5144==    by 0x13ADC7: std::_Tuple_impl<0ul, void (*)(int), int>::_M_head(std::_Tuple_impl<0ul, void (*)(int), int>&) (tuple:268)
==5144==    by 0x13A6DA: void (*&std::__get_helper<0ul, void (*)(int), int>(std::_Tuple_impl<0ul, void (*)(int), int>&))(int) (tuple:1378)
==5144==    by 0x139EBA: std::tuple_element<0ul, std::tuple<void (*)(int), int> >::type&& std::get<0ul, void (*)(int), int>(std::tuple<void (*)(int), int>&&) (tuple:1408)
==5144==    by 0x139AD7: void std::thread::_Invoker<std::tuple<void (*)(int), int> >::_M_invoke<0ul, 1ul>(std::_Index_tuple<0ul, 1ul>) (std_thread.h:259)
==5144==    by 0x13995B: std::thread::_Invoker<std::tuple<void (*)(int), int> >::operator()() (std_thread.h:266)
==5144==    by 0x139827: std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)(int), int> > >::_M_run() (std_thread.h:211)
==5144==    by 0x494F252: ??? (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.30)
==5144==    by 0x485396A: ??? (in /usr/libexec/valgrind/vgpreload_helgrind-amd64-linux.so)
==5144==    by 0x4B53AC2: start_thread (pthread_create.c:442)
==5144==    by 0x4BE4A03: clone (clone.S:100)
==5144== 
==5144== This conflicts with a previous write of size 8 by thread #2
==5144== Locks held: none
==5144==    at 0x13B0F4: std::_Head_base<0ul, void (*)(int), false>::_M_head(std::_Head_base<0ul, void (*)(int), false>&) (tuple:233)
==5144==    by 0x13ADC7: std::_Tuple_impl<0ul, void (*)(int), int>::_M_head(std::_Tuple_impl<0ul, void (*)(int), int>&) (tuple:268)
==5144==    by 0x13A6DA: void (*&std::__get_helper<0ul, void (*)(int), int>(std::_Tuple_impl<0ul, void (*)(int), int>&))(int) (tuple:1378)
==5144==    by 0x139EBA: std::tuple_element<0ul, std::tuple<void (*)(int), int> >::type&& std::get<0ul, void (*)(int), int>(std::tuple<void (*)(int), int>&&) (tuple:1408)
==5144==    by 0x139AD7: void std::thread::_Invoker<std::tuple<void (*)(int), int> >::_M_invoke<0ul, 1ul>(std::_Index_tuple<0ul, 1ul>) (std_thread.h:259)
==5144==    by 0x13995B: std::thread::_Invoker<std::tuple<void (*)(int), int> >::operator()() (std_thread.h:266)
==5144==    by 0x139827: std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)(int), int> > >::_M_run() (std_thread.h:211)
==5144==    by 0x494F252: ??? (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.30)
==5144==  Address 0x1555f0 is 0 bytes inside data symbol "__gcov0._ZNSt10_Head_baseILm0EPFviELb0EE7_M_headERS2_"
==5144== 
==5144== ----------------------------------------------------------------
==5144== 
==5144== Possible data race during write of size 8 at 0x1555F0 by thread #3
==5144== Locks held: none
==5144==    at 0x13B0F4: std::_Head_base<0ul, void (*)(int), false>::_M_head(std::_Head_base<0ul, void (*)(int), false>&) (tuple:233)
==5144==    by 0x13ADC7: std::_Tuple_impl<0ul, void (*)(int), int>::_M_head(std::_Tuple_impl<0ul, void (*)(int), int>&) (tuple:268)
==5144==    by 0x13A6DA: void (*&std::__get_helper<0ul, void (*)(int), int>(std::_Tuple_impl<0ul, void (*)(int), int>&))(int) (tuple:1378)
==5144==    by 0x139EBA: std::tuple_element<0ul, std::tuple<void (*)(int), int> >::type&& std::get<0ul, void (*)(int), int>(std::tuple<void (*)(int), int>&&) (tuple:1408)
==5144==    by 0x139AD7: void std::thread::_Invoker<std::tuple<void (*)(int), int> >::_M_invoke<0ul, 1ul>(std::_Index_tuple<0ul, 1ul>) (std_thread.h:259)
==5144==    by 0x13995B: std::thread::_Invoker<std::tuple<void (*)(int), int> >::operator()() (std_thread.h:266)
==5144==    by 0x139827: std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)(int), int> > >::_M_run() (std_thread.h:211)
==5144==    by 0x494F252: ??? (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.30)
==5144==    by 0x485396A: ??? (in /usr/libexec/valgrind/vgpreload_helgrind-amd64-linux.so)
==5144==    by 0x4B53AC2: start_thread (pthread_create.c:442)
==5144==    by 0x4BE4A03: clone (clone.S:100)
==5144== 
==5144== This conflicts with a previous write of size 8 by thread #2
==5144== Locks held: none
==5144==    at 0x13B0F4: std::_Head_base<0ul, void (*)(int), false>::_M_head(std::_Head_base<0ul, void (*)(int), false>&) (tuple:233)
==5144==    by 0x13ADC7: std::_Tuple_impl<0ul, void (*)(int), int>::_M_head(std::_Tuple_impl<0ul, void (*)(int), int>&) (tuple:268)
==5144==    by 0x13A6DA: void (*&std::__get_helper<0ul, void (*)(int), int>(std::_Tuple_impl<0ul, void (*)(int), int>&))(int) (tuple:1378)
==5144==    by 0x139EBA: std::tuple_element<0ul, std::tuple<void (*)(int), int> >::type&& std::get<0ul, void (*)(int), int>(std::tuple<void (*)(int), int>&&) (tuple:1408)
==5144==    by 0x139AD7: void std::thread::_Invoker<std::tuple<void (*)(int), int> >::_M_invoke<0ul, 1ul>(std::_Index_tuple<0ul, 1ul>) (std_thread.h:259)
==5144==    by 0x13995B: std::thread::_Invoker<std::tuple<void (*)(int), int> >::operator()() (std_thread.h:266)
==5144==    by 0x139827: std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)(int), int> > >::_M_run() (std_thread.h:211)
==5144==    by 0x494F252: ??? (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.30)
==5144==  Address 0x1555f0 is 0 bytes inside data symbol "__gcov0._ZNSt10_Head_baseILm0EPFviELb0EE7_M_headERS2_"
==5144== 
==5144== ----------------------------------------------------------------
==5144== 
==5144== Possible data race during read of size 8 at 0x1556A8 by thread #3
==5144== Locks held: none
==5144==    at 0x13ADC9: std::_Tuple_impl<0ul, void (*)(int), int>::_M_head(std::_Tuple_impl<0ul, void (*)(int), int>&) (tuple:268)
==5144==    by 0x13A6DA: void (*&std::__get_helper<0ul, void (*)(int), int>(std::_Tuple_impl<0ul, void (*)(int), int>&))(int) (tuple:1378)
==5144==    by 0x139EBA: std::tuple_element<0ul, std::tuple<void (*)(int), int> >::type&& std::get<0ul, void (*)(int), int>(std::tuple<void (*)(int), int>&&) (tuple:1408)
==5144==    by 0x139AD7: void std::thread::_Invoker<std::tuple<void (*)(int), int> >::_M_invoke<0ul, 1ul>(std::_Index_tuple<0ul, 1ul>) (std_thread.h:259)
==5144==    by 0x13995B: std::thread::_Invoker<std::tuple<void (*)(int), int> >::operator()() (std_thread.h:266)
==5144==    by 0x139827: std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)(int), int> > >::_M_run() (std_thread.h:211)
==5144==    by 0x494F252: ??? (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.30)
==5144==    by 0x485396A: ??? (in /usr/libexec/valgrind/vgpreload_helgrind-amd64-linux.so)
==5144==    by 0x4B53AC2: start_thread (pthread_create.c:442)
==5144==    by 0x4BE4A03: clone (clone.S:100)
==5144== 
==5144== This conflicts with a previous write of size 8 by thread #2
==5144== Locks held: none
==5144==    at 0x13ADD4: std::_Tuple_impl<0ul, void (*)(int), int>::_M_head(std::_Tuple_impl<0ul, void (*)(int), int>&) (tuple:268)
==5144==    by 0x13A6DA: void (*&std::__get_helper<0ul, void (*)(int), int>(std::_Tuple_impl<0ul, void (*)(int), int>&))(int) (tuple:1378)
==5144==    by 0x139EBA: std::tuple_element<0ul, std::tuple<void (*)(int), int> >::type&& std::get<0ul, void (*)(int), int>(std::tuple<void (*)(int), int>&&) (tuple:1408)
==5144==    by 0x139AD7: void std::thread::_Invoker<std::tuple<void (*)(int), int> >::_M_invoke<0ul, 1ul>(std::_Index_tuple<0ul, 1ul>) (std_thread.h:259)
==5144==    by 0x13995B: std::thread::_Invoker<std::tuple<void (*)(int), int> >::operator()() (std_thread.h:266)
==5144==    by 0x139827: std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)(int), int> > >::_M_run() (std_thread.h:211)
==5144==    by 0x494F252: ??? (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.30)
==5144==    by 0x485396A: ??? (in /usr/libexec/valgrind/vgpreload_helgrind-amd64-linux.so)
==5144==  Address 0x1556a8 is 8 bytes inside data symbol "__gcov0._ZNSt11_Tuple_implILm0EJPFviEiEE7_M_headERS2_"
==5144== 
==5144== ----------------------------------------------------------------
==5144== 
==5144== Possible data race during write of size 8 at 0x1556A8 by thread #3
==5144== Locks held: none
==5144==    at 0x13ADD4: std::_Tuple_impl<0ul, void (*)(int), int>::_M_head(std::_Tuple_impl<0ul, void (*)(int), int>&) (tuple:268)
==5144==    by 0x13A6DA: void (*&std::__get_helper<0ul, void (*)(int), int>(std::_Tuple_impl<0ul, void (*)(int), int>&))(int) (tuple:1378)
==5144==    by 0x139EBA: std::tuple_element<0ul, std::tuple<void (*)(int), int> >::type&& std::get<0ul, void (*)(int), int>(std::tuple<void (*)(int), int>&&) (tuple:1408)
==5144==    by 0x139AD7: void std::thread::_Invoker<std::tuple<void (*)(int), int> >::_M_invoke<0ul, 1ul>(std::_Index_tuple<0ul, 1ul>) (std_thread.h:259)
==5144==    by 0x13995B: std::thread::_Invoker<std::tuple<void (*)(int), int> >::operator()() (std_thread.h:266)
==5144==    by 0x139827: std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)(int), int> > >::_M_run() (std_thread.h:211)
==5144==    by 0x494F252: ??? (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.30)
==5144==    by 0x485396A: ??? (in /usr/libexec/valgrind/vgpreload_helgrind-amd64-linux.so)
==5144==    by 0x4B53AC2: start_thread (pthread_create.c:442)
==5144==    by 0x4BE4A03: clone (clone.S:100)
==5144== 
==5144== This conflicts with a previous write of size 8 by thread #2
==5144== Locks held: none
==5144==    at 0x13ADD4: std::_Tuple_impl<0ul, void (*)(int), int>::_M_head(std::_Tuple_impl<0ul, void (*)(int), int>&) (tuple:268)
==5144==    by 0x13A6DA: void (*&std::__get_helper<0ul, void (*)(int), int>(std::_Tuple_impl<0ul, void (*)(int), int>&))(int) (tuple:1378)
==5144==    by 0x139EBA: std::tuple_element<0ul, std::tuple<void (*)(int), int> >::type&& std::get<0ul, void (*)(int), int>(std::tuple<void (*)(int), int>&&) (tuple:1408)
==5144==    by 0x139AD7: void std::thread::_Invoker<std::tuple<void (*)(int), int> >::_M_invoke<0ul, 1ul>(std::_Index_tuple<0ul, 1ul>) (std_thread.h:259)
==5144==    by 0x13995B: std::thread::_Invoker<std::tuple<void (*)(int), int> >::operator()() (std_thread.h:266)
==5144==    by 0x139827: std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)(int), int> > >::_M_run() (std_thread.h:211)
==5144==    by 0x494F252: ??? (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.30)
==5144==    by 0x485396A: ??? (in /usr/libexec/valgrind/vgpreload_helgrind-amd64-linux.so)
==5144==  Address 0x1556a8 is 8 bytes inside data symbol "__gcov0._ZNSt11_Tuple_implILm0EJPFviEiEE7_M_headERS2_"
==5144== 
==5144== ----------------------------------------------------------------
==5144== 
==5144== Possible data race during read of size 8 at 0x155868 by thread #3
==5144== Locks held: none
==5144==    at 0x13A6DC: void (*&std::__get_helper<0ul, void (*)(int), int>(std::_Tuple_impl<0ul, void (*)(int), int>&))(int) (tuple:1378)
==5144==    by 0x139EBA: std::tuple_element<0ul, std::tuple<void (*)(int), int> >::type&& std::get<0ul, void (*)(int), int>(std::tuple<void (*)(int), int>&&) (tuple:1408)
==5144==    by 0x139AD7: void std::thread::_Invoker<std::tuple<void (*)(int), int> >::_M_invoke<0ul, 1ul>(std::_Index_tuple<0ul, 1ul>) (std_thread.h:259)
==5144==    by 0x13995B: std::thread::_Invoker<std::tuple<void (*)(int), int> >::operator()() (std_thread.h:266)
==5144==    by 0x139827: std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)(int), int> > >::_M_run() (std_thread.h:211)
==5144==    by 0x494F252: ??? (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.30)
==5144==    by 0x485396A: ??? (in /usr/libexec/valgrind/vgpreload_helgrind-amd64-linux.so)
==5144==    by 0x4B53AC2: start_thread (pthread_create.c:442)
==5144==    by 0x4BE4A03: clone (clone.S:100)
==5144== 
==5144== This conflicts with a previous write of size 8 by thread #2
==5144== Locks held: none
==5144==    at 0x13A6E7: void (*&std::__get_helper<0ul, void (*)(int), int>(std::_Tuple_impl<0ul, void (*)(int), int>&))(int) (tuple:1378)
==5144==    by 0x139EBA: std::tuple_element<0ul, std::tuple<void (*)(int), int> >::type&& std::get<0ul, void (*)(int), int>(std::tuple<void (*)(int), int>&&) (tuple:1408)
==5144==    by 0x139AD7: void std::thread::_Invoker<std::tuple<void (*)(int), int> >::_M_invoke<0ul, 1ul>(std::_Index_tuple<0ul, 1ul>) (std_thread.h:259)
==5144==    by 0x13995B: std::thread::_Invoker<std::tuple<void (*)(int), int> >::operator()() (std_thread.h:266)
==5144==    by 0x139827: std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)(int), int> > >::_M_run() (std_thread.h:211)
==5144==    by 0x494F252: ??? (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.30)
==5144==    by 0x485396A: ??? (in /usr/libexec/valgrind/vgpreload_helgrind-amd64-linux.so)
==5144==    by 0x4B53AC2: start_thread (pthread_create.c:442)
==5144==  Address 0x155868 is 8 bytes inside data symbol "__gcov0._ZSt12__get_helperILm0EPFviEJiEERT0_RSt11_Tuple_implIXT_EJS2_DpT1_EE"
==5144== 
==5144== ----------------------------------------------------------------
==5144== 
==5144== Possible data race during write of size 8 at 0x155868 by thread #3
==5144== Locks held: none
==5144==    at 0x13A6E7: void (*&std::__get_helper<0ul, void (*)(int), int>(std::_Tuple_impl<0ul, void (*)(int), int>&))(int) (tuple:1378)
==5144==    by 0x139EBA: std::tuple_element<0ul, std::tuple<void (*)(int), int> >::type&& std::get<0ul, void (*)(int), int>(std::tuple<void (*)(int), int>&&) (tuple:1408)
==5144==    by 0x139AD7: void std::thread::_Invoker<std::tuple<void (*)(int), int> >::_M_invoke<0ul, 1ul>(std::_Index_tuple<0ul, 1ul>) (std_thread.h:259)
==5144==    by 0x13995B: std::thread::_Invoker<std::tuple<void (*)(int), int> >::operator()() (std_thread.h:266)
==5144==    by 0x139827: std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)(int), int> > >::_M_run() (std_thread.h:211)
==5144==    by 0x494F252: ??? (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.30)
==5144==    by 0x485396A: ??? (in /usr/libexec/valgrind/vgpreload_helgrind-amd64-linux.so)
==5144==    by 0x4B53AC2: start_thread (pthread_create.c:442)
==5144==    by 0x4BE4A03: clone (clone.S:100)
==5144== 
==5144== This conflicts with a previous write of size 8 by thread #2
==5144== Locks held: none
==5144==    at 0x13A6E7: void (*&std::__get_helper<0ul, void (*)(int), int>(std::_Tuple_impl<0ul, void (*)(int), int>&))(int) (tuple:1378)
==5144==    by 0x139EBA: std::tuple_element<0ul, std::tuple<void (*)(int), int> >::type&& std::get<0ul, void (*)(int), int>(std::tuple<void (*)(int), int>&&) (tuple:1408)
==5144==    by 0x139AD7: void std::thread::_Invoker<std::tuple<void (*)(int), int> >::_M_invoke<0ul, 1ul>(std::_Index_tuple<0ul, 1ul>) (std_thread.h:259)
==5144==    by 0x13995B: std::thread::_Invoker<std::tuple<void (*)(int), int> >::operator()() (std_thread.h:266)
==5144==    by 0x139827: std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)(int), int> > >::_M_run() (std_thread.h:211)
==5144==    by 0x494F252: ??? (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.30)
==5144==    by 0x485396A: ??? (in /usr/libexec/valgrind/vgpreload_helgrind-amd64-linux.so)
==5144==    by 0x4B53AC2: start_thread (pthread_create.c:442)
==5144==  Address 0x155868 is 8 bytes inside data symbol "__gcov0._ZSt12__get_helperILm0EPFviEJiEERT0_RSt11_Tuple_implIXT_EJS2_DpT1_EE"
==5144== 
==5144== ----------------------------------------------------------------
==5144== 
==5144== Possible data race during read of size 8 at 0x155AA8 by thread #3
==5144== Locks held: none
==5144==    at 0x139EBB: std::tuple_element<0ul, std::tuple<void (*)(int), int> >::type&& std::get<0ul, void (*)(int), int>(std::tuple<void (*)(int), int>&&) (tuple:1408)
==5144==    by 0x139AD7: void std::thread::_Invoker<std::tuple<void (*)(int), int> >::_M_invoke<0ul, 1ul>(std::_Index_tuple<0ul, 1ul>) (std_thread.h:259)
==5144==    by 0x13995B: std::thread::_Invoker<std::tuple<void (*)(int), int> >::operator()() (std_thread.h:266)
==5144==    by 0x139827: std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)(int), int> > >::_M_run() (std_thread.h:211)
==5144==    by 0x494F252: ??? (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.30)
==5144==    by 0x485396A: ??? (in /usr/libexec/valgrind/vgpreload_helgrind-amd64-linux.so)
==5144==    by 0x4B53AC2: start_thread (pthread_create.c:442)
==5144==    by 0x4BE4A03: clone (clone.S:100)
==5144== 
==5144== This conflicts with a previous write of size 8 by thread #2
==5144== Locks held: none
==5144==    at 0x139EC6: std::tuple_element<0ul, std::tuple<void (*)(int), int> >::type&& std::get<0ul, void (*)(int), int>(std::tuple<void (*)(int), int>&&) (tuple:1408)
==5144==    by 0x139AD7: void std::thread::_Invoker<std::tuple<void (*)(int), int> >::_M_invoke<0ul, 1ul>(std::_Index_tuple<0ul, 1ul>) (std_thread.h:259)
==5144==    by 0x13995B: std::thread::_Invoker<std::tuple<void (*)(int), int> >::operator()() (std_thread.h:266)
==5144==    by 0x139827: std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)(int), int> > >::_M_run() (std_thread.h:211)
==5144==    by 0x494F252: ??? (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.30)
==5144==    by 0x485396A: ??? (in /usr/libexec/valgrind/vgpreload_helgrind-amd64-linux.so)
==5144==    by 0x4B53AC2: start_thread (pthread_create.c:442)
==5144==    by 0x4BE4A03: clone (clone.S:100)
==5144==  Address 0x155aa8 is 8 bytes inside data symbol "__gcov0._ZSt3getILm0EJPFviEiEEONSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeEOS6_"
==5144== 
==5144== ----------------------------------------------------------------
==5144== 
==5144== Possible data race during write of size 8 at 0x155AA8 by thread #3
==5144== Locks held: none
==5144==    at 0x139EC6: std::tuple_element<0ul, std::tuple<void (*)(int), int> >::type&& std::get<0ul, void (*)(int), int>(std::tuple<void (*)(int), int>&&) (tuple:1408)
==5144==    by 0x139AD7: void std::thread::_Invoker<std::tuple<void (*)(int), int> >::_M_invoke<0ul, 1ul>(std::_Index_tuple<0ul, 1ul>) (std_thread.h:259)
==5144==    by 0x13995B: std::thread::_Invoker<std::tuple<void (*)(int), int> >::operator()() (std_thread.h:266)
==5144==    by 0x139827: std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)(int), int> > >::_M_run() (std_thread.h:211)
==5144==    by 0x494F252: ??? (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.30)
==5144==    by 0x485396A: ??? (in /usr/libexec/valgrind/vgpreload_helgrind-amd64-linux.so)
==5144==    by 0x4B53AC2: start_thread (pthread_create.c:442)
==5144==    by 0x4BE4A03: clone (clone.S:100)
==5144== 
==5144== This conflicts with a previous write of size 8 by thread #2
==5144== Locks held: none
==5144==    at 0x139EC6: std::tuple_element<0ul, std::tuple<void (*)(int), int> >::type&& std::get<0ul, void (*)(int), int>(std::tuple<void (*)(int), int>&&) (tuple:1408)
==5144==    by 0x139AD7: void std::thread::_Invoker<std::tuple<void (*)(int), int> >::_M_invoke<0ul, 1ul>(std::_Index_tuple<0ul, 1ul>) (std_thread.h:259)
==5144==    by 0x13995B: std::thread::_Invoker<std::tuple<void (*)(int), int> >::operator()() (std_thread.h:266)
==5144==    by 0x139827: std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)(int), int> > >::_M_run() (std_thread.h:211)
==5144==    by 0x494F252: ??? (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.30)
==5144==    by 0x485396A: ??? (in /usr/libexec/valgrind/vgpreload_helgrind-amd64-linux.so)
==5144==    by 0x4B53AC2: start_thread (pthread_create.c:442)
==5144==    by 0x4BE4A03: clone (clone.S:100)
==5144==  Address 0x155aa8 is 8 bytes inside data symbol "__gcov0._ZSt3getILm0EJPFviEiEEONSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeEOS6_"
==5144== 
==5144== ----------------------------------------------------------------
==5144== 
==5144== Possible data race during read of size 8 at 0x155850 by thread #3
==5144== Locks held: none
==5144==    at 0x13A706: void (*&&std::forward<void (*)(int)>(std::remove_reference<void (*)(int)>::type&))(int) (move.h:77)
==5144==    by 0x139ED4: std::tuple_element<0ul, std::tuple<void (*)(int), int> >::type&& std::get<0ul, void (*)(int), int>(std::tuple<void (*)(int), int>&&) (tuple:1408)
==5144==    by 0x139AD7: void std::thread::_Invoker<std::tuple<void (*)(int), int> >::_M_invoke<0ul, 1ul>(std::_Index_tuple<0ul, 1ul>) (std_thread.h:259)
==5144==    by 0x13995B: std::thread::_Invoker<std::tuple<void (*)(int), int> >::operator()() (std_thread.h:266)
==5144==    by 0x139827: std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)(int), int> > >::_M_run() (std_thread.h:211)
==5144==    by 0x494F252: ??? (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.30)
==5144==    by 0x485396A: ??? (in /usr/libexec/valgrind/vgpreload_helgrind-amd64-linux.so)
==5144==    by 0x4B53AC2: start_thread (pthread_create.c:442)
==5144==    by 0x4BE4A03: clone (clone.S:100)
==5144== 
==5144== This conflicts with a previous write of size 8 by thread #2
==5144== Locks held: none
==5144==    at 0x13A711: void (*&&std::forward<void (*)(int)>(std::remove_reference<void (*)(int)>::type&))(int) (move.h:77)
==5144==    by 0x139ED4: std::tuple_element<0ul, std::tuple<void (*)(int), int> >::type&& std::get<0ul, void (*)(int), int>(std::tuple<void (*)(int), int>&&) (tuple:1408)
==5144==    by 0x139AD7: void std::thread::_Invoker<std::tuple<void (*)(int), int> >::_M_invoke<0ul, 1ul>(std::_Index_tuple<0ul, 1ul>) (std_thread.h:259)
==5144==    by 0x13995B: std::thread::_Invoker<std::tuple<void (*)(int), int> >::operator()() (std_thread.h:266)
==5144==    by 0x139827: std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)(int), int> > >::_M_run() (std_thread.h:211)
==5144==    by 0x494F252: ??? (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.30)
==5144==    by 0x485396A: ??? (in /usr/libexec/valgrind/vgpreload_helgrind-amd64-linux.so)
==5144==    by 0x4B53AC2: start_thread (pthread_create.c:442)
==5144==  Address 0x155850 is 0 bytes inside data symbol "__gcov0._ZSt7forwardIPFviEEOT_RNSt16remove_referenceIS2_E4typeE"
==5144== 
==5144== ----------------------------------------------------------------
==5144== 
==5144== Possible data race during write of size 8 at 0x155850 by thread #3
==5144== Locks held: none
==5144==    at 0x13A711: void (*&&std::forward<void (*)(int)>(std::remove_reference<void (*)(int)>::type&))(int) (move.h:77)
==5144==    by 0x139ED4: std::tuple_element<0ul, std::tuple<void (*)(int), int> >::type&& std::get<0ul, void (*)(int), int>(std::tuple<void (*)(int), int>&&) (tuple:1408)
==5144==    by 0x139AD7: void std::thread::_Invoker<std::tuple<void (*)(int), int> >::_M_invoke<0ul, 1ul>(std::_Index_tuple<0ul, 1ul>) (std_thread.h:259)
==5144==    by 0x13995B: std::thread::_Invoker<std::tuple<void (*)(int), int> >::operator()() (std_thread.h:266)
==5144==    by 0x139827: std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)(int), int> > >::_M_run() (std_thread.h:211)
==5144==    by 0x494F252: ??? (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.30)
==5144==    by 0x485396A: ??? (in /usr/libexec/valgrind/vgpreload_helgrind-amd64-linux.so)
==5144==    by 0x4B53AC2: start_thread (pthread_create.c:442)
==5144==    by 0x4BE4A03: clone (clone.S:100)
==5144== 
==5144== This conflicts with a previous write of size 8 by thread #2
==5144== Locks held: none
==5144==    at 0x13A711: void (*&&std::forward<void (*)(int)>(std::remove_reference<void (*)(int)>::type&))(int) (move.h:77)
==5144==    by 0x139ED4: std::tuple_element<0ul, std::tuple<void (*)(int), int> >::type&& std::get<0ul, void (*)(int), int>(std::tuple<void (*)(int), int>&&) (tuple:1408)
==5144==    by 0x139AD7: void std::thread::_Invoker<std::tuple<void (*)(int), int> >::_M_invoke<0ul, 1ul>(std::_Index_tuple<0ul, 1ul>) (std_thread.h:259)
==5144==    by 0x13995B: std::thread::_Invoker<std::tuple<void (*)(int), int> >::operator()() (std_thread.h:266)
==5144==    by 0x139827: std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)(int), int> > >::_M_run() (std_thread.h:211)
==5144==    by 0x494F252: ??? (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.30)
==5144==    by 0x485396A: ??? (in /usr/libexec/valgrind/vgpreload_helgrind-amd64-linux.so)
==5144==    by 0x4B53AC2: start_thread (pthread_create.c:442)
==5144==  Address 0x155850 is 0 bytes inside data symbol "__gcov0._ZSt7forwardIPFviEEOT_RNSt16remove_referenceIS2_E4typeE"
==5144== 
==5144== ----------------------------------------------------------------
==5144== 
==5144== Possible data race during read of size 8 at 0x155AB0 by thread #3
==5144== Locks held: none
==5144==    at 0x139ED6: std::tuple_element<0ul, std::tuple<void (*)(int), int> >::type&& std::get<0ul, void (*)(int), int>(std::tuple<void (*)(int), int>&&) (tuple:1408)
==5144==    by 0x139AD7: void std::thread::_Invoker<std::tuple<void (*)(int), int> >::_M_invoke<0ul, 1ul>(std::_Index_tuple<0ul, 1ul>) (std_thread.h:259)
==5144==    by 0x13995B: std::thread::_Invoker<std::tuple<void (*)(int), int> >::operator()() (std_thread.h:266)
==5144==    by 0x139827: std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)(int), int> > >::_M_run() (std_thread.h:211)
==5144==    by 0x494F252: ??? (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.30)
==5144==    by 0x485396A: ??? (in /usr/libexec/valgrind/vgpreload_helgrind-amd64-linux.so)
==5144==    by 0x4B53AC2: start_thread (pthread_create.c:442)
==5144==    by 0x4BE4A03: clone (clone.S:100)
==5144== 
==5144== This conflicts with a previous write of size 8 by thread #2
==5144== Locks held: none
==5144==    at 0x139EE1: std::tuple_element<0ul, std::tuple<void (*)(int), int> >::type&& std::get<0ul, void (*)(int), int>(std::tuple<void (*)(int), int>&&) (tuple:1408)
==5144==    by 0x139AD7: void std::thread::_Invoker<std::tuple<void (*)(int), int> >::_M_invoke<0ul, 1ul>(std::_Index_tuple<0ul, 1ul>) (std_thread.h:259)
==5144==    by 0x13995B: std::thread::_Invoker<std::tuple<void (*)(int), int> >::operator()() (std_thread.h:266)
==5144==    by 0x139827: std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)(int), int> > >::_M_run() (std_thread.h:211)
==5144==    by 0x494F252: ??? (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.30)
==5144==    by 0x485396A: ??? (in /usr/libexec/valgrind/vgpreload_helgrind-amd64-linux.so)
==5144==    by 0x4B53AC2: start_thread (pthread_create.c:442)
==5144==    by 0x4BE4A03: clone (clone.S:100)
==5144==  Address 0x155ab0 is 16 bytes inside data symbol "__gcov0._ZSt3getILm0EJPFviEiEEONSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeEOS6_"
==5144== 
==5144== ----------------------------------------------------------------
==5144== 
==5144== Possible data race during write of size 8 at 0x155AB0 by thread #3
==5144== Locks held: none
==5144==    at 0x139EE1: std::tuple_element<0ul, std::tuple<void (*)(int), int> >::type&& std::get<0ul, void (*)(int), int>(std::tuple<void (*)(int), int>&&) (tuple:1408)
==5144==    by 0x139AD7: void std::thread::_Invoker<std::tuple<void (*)(int), int> >::_M_invoke<0ul, 1ul>(std::_Index_tuple<0ul, 1ul>) (std_thread.h:259)
==5144==    by 0x13995B: std::thread::_Invoker<std::tuple<void (*)(int), int> >::operator()() (std_thread.h:266)
==5144==    by 0x139827: std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)(int), int> > >::_M_run() (std_thread.h:211)
==5144==    by 0x494F252: ??? (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.30)
==5144==    by 0x485396A: ??? (in /usr/libexec/valgrind/vgpreload_helgrind-amd64-linux.so)
==5144==    by 0x4B53AC2: start_thread (pthread_create.c:442)
==5144==    by 0x4BE4A03: clone (clone.S:100)
==5144== 
==5144== This conflicts with a previous write of size 8 by thread #2
==5144== Locks held: none
==5144==    at 0x139EE1: std::tuple_element<0ul, std::tuple<void (*)(int), int> >::type&& std::get<0ul, void (*)(int), int>(std::tuple<void (*)(int), int>&&) (tuple:1408)
==5144==    by 0x139AD7: void std::thread::_Invoker<std::tuple<void (*)(int), int> >::_M_invoke<0ul, 1ul>(std::_Index_tuple<0ul, 1ul>) (std_thread.h:259)
==5144==    by 0x13995B: std::thread::_Invoker<std::tuple<void (*)(int), int> >::operator()() (std_thread.h:266)
==5144==    by 0x139827: std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)(int), int> > >::_M_run() (std_thread.h:211)
==5144==    by 0x494F252: ??? (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.30)
==5144==    by 0x485396A: ??? (in /usr/libexec/valgrind/vgpreload_helgrind-amd64-linux.so)
==5144==    by 0x4B53AC2: start_thread (pthread_create.c:442)
==5144==    by 0x4BE4A03: clone (clone.S:100)
==5144==  Address 0x155ab0 is 16 bytes inside data symbol "__gcov0._ZSt3getILm0EJPFviEiEEONSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeEOS6_"
==5144== 
==5144== ----------------------------------------------------------------
==5144== 
==5144== Possible data race during read of size 8 at 0x155BC0 by thread #3
==5144== Locks held: none
==5144==    at 0x139AD8: void std::thread::_Invoker<std::tuple<void (*)(int), int> >::_M_invoke<0ul, 1ul>(std::_Index_tuple<0ul, 1ul>) (std_thread.h:259)
==5144==    by 0x13995B: std::thread::_Invoker<std::tuple<void (*)(int), int> >::operator()() (std_thread.h:266)
==5144==    by 0x139827: std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)(int), int> > >::_M_run() (std_thread.h:211)
==5144==    by 0x494F252: ??? (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.30)
==5144==    by 0x485396A: ??? (in /usr/libexec/valgrind/vgpreload_helgrind-amd64-linux.so)
==5144==    by 0x4B53AC2: start_thread (pthread_create.c:442)
==5144==    by 0x4BE4A03: clone (clone.S:100)
==5144== 
==5144== This conflicts with a previous write of size 8 by thread #2
==5144== Locks held: none
==5144==    at 0x139AE3: void std::thread::_Invoker<std::tuple<void (*)(int), int> >::_M_invoke<0ul, 1ul>(std::_Index_tuple<0ul, 1ul>) (std_thread.h:259)
==5144==    by 0x13995B: std::thread::_Invoker<std::tuple<void (*)(int), int> >::operator()() (std_thread.h:266)
==5144==    by 0x139827: std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)(int), int> > >::_M_run() (std_thread.h:211)
==5144==    by 0x494F252: ??? (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.30)
==5144==    by 0x485396A: ??? (in /usr/libexec/valgrind/vgpreload_helgrind-amd64-linux.so)
==5144==    by 0x4B53AC2: start_thread (pthread_create.c:442)
==5144==    by 0x4BE4A03: clone (clone.S:100)
==5144==  Address 0x155bc0 is 32 bytes inside data symbol "__gcov0._ZNSt6thread8_InvokerISt5tupleIJPFviEiEEE9_M_invokeIJLm0ELm1EEEEvSt12_Index_tupleIJXspT_EEE"
==5144== 
==5144== ----------------------------------------------------------------
==5144== 
==5144== Possible data race during write of size 8 at 0x155BC0 by thread #3
==5144== Locks held: none
==5144==    at 0x139AE3: void std::thread::_Invoker<std::tuple<void (*)(int), int> >::_M_invoke<0ul, 1ul>(std::_Index_tuple<0ul, 1ul>) (std_thread.h:259)
==5144==    by 0x13995B: std::thread::_Invoker<std::tuple<void (*)(int), int> >::operator()() (std_thread.h:266)
==5144==    by 0x139827: std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)(int), int> > >::_M_run() (std_thread.h:211)
==5144==    by 0x494F252: ??? (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.30)
==5144==    by 0x485396A: ??? (in /usr/libexec/valgrind/vgpreload_helgrind-amd64-linux.so)
==5144==    by 0x4B53AC2: start_thread (pthread_create.c:442)
==5144==    by 0x4BE4A03: clone (clone.S:100)
==5144== 
==5144== This conflicts with a previous write of size 8 by thread #2
==5144== Locks held: none
==5144==    at 0x139AE3: void std::thread::_Invoker<std::tuple<void (*)(int), int> >::_M_invoke<0ul, 1ul>(std::_Index_tuple<0ul, 1ul>) (std_thread.h:259)
==5144==    by 0x13995B: std::thread::_Invoker<std::tuple<void (*)(int), int> >::operator()() (std_thread.h:266)
==5144==    by 0x139827: std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)(int), int> > >::_M_run() (std_thread.h:211)
==5144==    by 0x494F252: ??? (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.30)
==5144==    by 0x485396A: ??? (in /usr/libexec/valgrind/vgpreload_helgrind-amd64-linux.so)
==5144==    by 0x4B53AC2: start_thread (pthread_create.c:442)
==5144==    by 0x4BE4A03: clone (clone.S:100)
==5144==  Address 0x155bc0 is 32 bytes inside data symbol "__gcov0._ZNSt6thread8_InvokerISt5tupleIJPFviEiEEE9_M_invokeIJLm0ELm1EEEEvSt12_Index_tupleIJXspT_EEE"
==5144== 
==5144== ----------------------------------------------------------------
==5144== 
==5144== Possible data race during read of size 8 at 0x155A60 by thread #3
==5144== Locks held: none
==5144==    at 0x139F68: std::__invoke_result<void (*)(int), int>::type std::__invoke<void (*)(int), int>(void (*&&)(int), int&&) (invoke.h:90)
==5144==    by 0x139AF4: void std::thread::_Invoker<std::tuple<void (*)(int), int> >::_M_invoke<0ul, 1ul>(std::_Index_tuple<0ul, 1ul>) (std_thread.h:259)
==5144==    by 0x13995B: std::thread::_Invoker<std::tuple<void (*)(int), int> >::operator()() (std_thread.h:266)
==5144==    by 0x139827: std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)(int), int> > >::_M_run() (std_thread.h:211)
==5144==    by 0x494F252: ??? (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.30)
==5144==    by 0x485396A: ??? (in /usr/libexec/valgrind/vgpreload_helgrind-amd64-linux.so)
==5144==    by 0x4B53AC2: start_thread (pthread_create.c:442)
==5144==    by 0x4BE4A03: clone (clone.S:100)
==5144== 
==5144== This conflicts with a previous write of size 8 by thread #2
==5144== Locks held: none
==5144==    at 0x139F73: std::__invoke_result<void (*)(int), int>::type std::__invoke<void (*)(int), int>(void (*&&)(int), int&&) (invoke.h:90)
==5144==    by 0x139AF4: void std::thread::_Invoker<std::tuple<void (*)(int), int> >::_M_invoke<0ul, 1ul>(std::_Index_tuple<0ul, 1ul>) (std_thread.h:259)
==5144==    by 0x13995B: std::thread::_Invoker<std::tuple<void (*)(int), int> >::operator()() (std_thread.h:266)
==5144==    by 0x139827: std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)(int), int> > >::_M_run() (std_thread.h:211)
==5144==    by 0x494F252: ??? (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.30)
==5144==    by 0x485396A: ??? (in /usr/libexec/valgrind/vgpreload_helgrind-amd64-linux.so)
==5144==    by 0x4B53AC2: start_thread (pthread_create.c:442)
==5144==    by 0x4BE4A03: clone (clone.S:100)
==5144==  Address 0x155a60 is 0 bytes inside data symbol "__gcov0._ZSt8__invokeIPFviEJiEENSt15__invoke_resultIT_JDpT0_EE4typeEOS3_DpOS4_"
==5144== 
==5144== ----------------------------------------------------------------
==5144== 
==5144== Possible data race during write of size 8 at 0x155A60 by thread #3
==5144== Locks held: none
==5144==    at 0x139F73: std::__invoke_result<void (*)(int), int>::type std::__invoke<void (*)(int), int>(void (*&&)(int), int&&) (invoke.h:90)
==5144==    by 0x139AF4: void std::thread::_Invoker<std::tuple<void (*)(int), int> >::_M_invoke<0ul, 1ul>(std::_Index_tuple<0ul, 1ul>) (std_thread.h:259)
==5144==    by 0x13995B: std::thread::_Invoker<std::tuple<void (*)(int), int> >::operator()() (std_thread.h:266)
==5144==    by 0x139827: std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)(int), int> > >::_M_run() (std_thread.h:211)
==5144==    by 0x494F252: ??? (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.30)
==5144==    by 0x485396A: ??? (in /usr/libexec/valgrind/vgpreload_helgrind-amd64-linux.so)
==5144==    by 0x4B53AC2: start_thread (pthread_create.c:442)
==5144==    by 0x4BE4A03: clone (clone.S:100)
==5144== 
==5144== This conflicts with a previous write of size 8 by thread #2
==5144== Locks held: none
==5144==    at 0x139F73: std::__invoke_result<void (*)(int), int>::type std::__invoke<void (*)(int), int>(void (*&&)(int), int&&) (invoke.h:90)
==5144==    by 0x139AF4: void std::thread::_Invoker<std::tuple<void (*)(int), int> >::_M_invoke<0ul, 1ul>(std::_Index_tuple<0ul, 1ul>) (std_thread.h:259)
==5144==    by 0x13995B: std::thread::_Invoker<std::tuple<void (*)(int), int> >::operator()() (std_thread.h:266)
==5144==    by 0x139827: std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)(int), int> > >::_M_run() (std_thread.h:211)
==5144==    by 0x494F252: ??? (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.30)
==5144==    by 0x485396A: ??? (in /usr/libexec/valgrind/vgpreload_helgrind-amd64-linux.so)
==5144==    by 0x4B53AC2: start_thread (pthread_create.c:442)
==5144==    by 0x4BE4A03: clone (clone.S:100)
==5144==  Address 0x155a60 is 0 bytes inside data symbol "__gcov0._ZSt8__invokeIPFviEJiEENSt15__invoke_resultIT_JDpT0_EE4typeEOS3_DpOS4_"
==5144== 
==5144== ----------------------------------------------------------------
==5144== 
==5144== Possible data race during read of size 8 at 0x155A68 by thread #3
==5144== Locks held: none
==5144==    at 0x139F89: std::__invoke_result<void (*)(int), int>::type std::__invoke<void (*)(int), int>(void (*&&)(int), int&&) (invoke.h:96)
==5144==    by 0x139AF4: void std::thread::_Invoker<std::tuple<void (*)(int), int> >::_M_invoke<0ul, 1ul>(std::_Index_tuple<0ul, 1ul>) (std_thread.h:259)
==5144==    by 0x13995B: std::thread::_Invoker<std::tuple<void (*)(int), int> >::operator()() (std_thread.h:266)
==5144==    by 0x139827: std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)(int), int> > >::_M_run() (std_thread.h:211)
==5144==    by 0x494F252: ??? (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.30)
==5144==    by 0x485396A: ??? (in /usr/libexec/valgrind/vgpreload_helgrind-amd64-linux.so)
==5144==    by 0x4B53AC2: start_thread (pthread_create.c:442)
==5144==    by 0x4BE4A03: clone (clone.S:100)
==5144== 
==5144== This conflicts with a previous write of size 8 by thread #2
==5144== Locks held: none
==5144==    at 0x139F94: std::__invoke_result<void (*)(int), int>::type std::__invoke<void (*)(int), int>(void (*&&)(int), int&&) (invoke.h:96)
==5144==    by 0x139AF4: void std::thread::_Invoker<std::tuple<void (*)(int), int> >::_M_invoke<0ul, 1ul>(std::_Index_tuple<0ul, 1ul>) (std_thread.h:259)
==5144==    by 0x13995B: std::thread::_Invoker<std::tuple<void (*)(int), int> >::operator()() (std_thread.h:266)
==5144==    by 0x139827: std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)(int), int> > >::_M_run() (std_thread.h:211)
==5144==    by 0x494F252: ??? (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.30)
==5144==    by 0x485396A: ??? (in /usr/libexec/valgrind/vgpreload_helgrind-amd64-linux.so)
==5144==    by 0x4B53AC2: start_thread (pthread_create.c:442)
==5144==    by 0x4BE4A03: clone (clone.S:100)
==5144==  Address 0x155a68 is 8 bytes inside data symbol "__gcov0._ZSt8__invokeIPFviEJiEENSt15__invoke_resultIT_JDpT0_EE4typeEOS3_DpOS4_"
==5144== 
==5144== ----------------------------------------------------------------
==5144== 
==5144== Possible data race during write of size 8 at 0x155A68 by thread #3
==5144== Locks held: none
==5144==    at 0x139F94: std::__invoke_result<void (*)(int), int>::type std::__invoke<void (*)(int), int>(void (*&&)(int), int&&) (invoke.h:96)
==5144==    by 0x139AF4: void std::thread::_Invoker<std::tuple<void (*)(int), int> >::_M_invoke<0ul, 1ul>(std::_Index_tuple<0ul, 1ul>) (std_thread.h:259)
==5144==    by 0x13995B: std::thread::_Invoker<std::tuple<void (*)(int), int> >::operator()() (std_thread.h:266)
==5144==    by 0x139827: std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)(int), int> > >::_M_run() (std_thread.h:211)
==5144==    by 0x494F252: ??? (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.30)
==5144==    by 0x485396A: ??? (in /usr/libexec/valgrind/vgpreload_helgrind-amd64-linux.so)
==5144==    by 0x4B53AC2: start_thread (pthread_create.c:442)
==5144==    by 0x4BE4A03: clone (clone.S:100)
==5144== 
==5144== This conflicts with a previous write of size 8 by thread #2
==5144== Locks held: none
==5144==    at 0x139F94: std::__invoke_result<void (*)(int), int>::type std::__invoke<void (*)(int), int>(void (*&&)(int), int&&) (invoke.h:96)
==5144==    by 0x139AF4: void std::thread::_Invoker<std::tuple<void (*)(int), int> >::_M_invoke<0ul, 1ul>(std::_Index_tuple<0ul, 1ul>) (std_thread.h:259)
==5144==    by 0x13995B: std::thread::_Invoker<std::tuple<void (*)(int), int> >::operator()() (std_thread.h:266)
==5144==    by 0x139827: std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)(int), int> > >::_M_run() (std_thread.h:211)
==5144==    by 0x494F252: ??? (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.30)
==5144==    by 0x485396A: ??? (in /usr/libexec/valgrind/vgpreload_helgrind-amd64-linux.so)
==5144==    by 0x4B53AC2: start_thread (pthread_create.c:442)
==5144==    by 0x4BE4A03: clone (clone.S:100)
==5144==  Address 0x155a68 is 8 bytes inside data symbol "__gcov0._ZSt8__invokeIPFviEJiEENSt15__invoke_resultIT_JDpT0_EE4typeEOS3_DpOS4_"
==5144== 
==5144== ----------------------------------------------------------------
==5144== 
==5144== Possible data race during read of size 8 at 0x155A70 by thread #3
==5144== Locks held: none
==5144==    at 0x139FA7: std::__invoke_result<void (*)(int), int>::type std::__invoke<void (*)(int), int>(void (*&&)(int), int&&) (invoke.h:96)
==5144==    by 0x139AF4: void std::thread::_Invoker<std::tuple<void (*)(int), int> >::_M_invoke<0ul, 1ul>(std::_Index_tuple<0ul, 1ul>) (std_thread.h:259)
==5144==    by 0x13995B: std::thread::_Invoker<std::tuple<void (*)(int), int> >::operator()() (std_thread.h:266)
==5144==    by 0x139827: std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)(int), int> > >::_M_run() (std_thread.h:211)
==5144==    by 0x494F252: ??? (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.30)
==5144==    by 0x485396A: ??? (in /usr/libexec/valgrind/vgpreload_helgrind-amd64-linux.so)
==5144==    by 0x4B53AC2: start_thread (pthread_create.c:442)
==5144==    by 0x4BE4A03: clone (clone.S:100)
==5144== 
==5144== This conflicts with a previous write of size 8 by thread #2
==5144== Locks held: none
==5144==    at 0x139FB2: std::__invoke_result<void (*)(int), int>::type std::__invoke<void (*)(int), int>(void (*&&)(int), int&&) (invoke.h:96)
==5144==    by 0x139AF4: void std::thread::_Invoker<std::tuple<void (*)(int), int> >::_M_invoke<0ul, 1ul>(std::_Index_tuple<0ul, 1ul>) (std_thread.h:259)
==5144==    by 0x13995B: std::thread::_Invoker<std::tuple<void (*)(int), int> >::operator()() (std_thread.h:266)
==5144==    by 0x139827: std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)(int), int> > >::_M_run() (std_thread.h:211)
==5144==    by 0x494F252: ??? (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.30)
==5144==    by 0x485396A: ??? (in /usr/libexec/valgrind/vgpreload_helgrind-amd64-linux.so)
==5144==    by 0x4B53AC2: start_thread (pthread_create.c:442)
==5144==    by 0x4BE4A03: clone (clone.S:100)
==5144==  Address 0x155a70 is 16 bytes inside data symbol "__gcov0._ZSt8__invokeIPFviEJiEENSt15__invoke_resultIT_JDpT0_EE4typeEOS3_DpOS4_"
==5144== 
==5144== ----------------------------------------------------------------
==5144== 
==5144== Possible data race during write of size 8 at 0x155A70 by thread #3
==5144== Locks held: none
==5144==    at 0x139FB2: std::__invoke_result<void (*)(int), int>::type std::__invoke<void (*)(int), int>(void (*&&)(int), int&&) (invoke.h:96)
==5144==    by 0x139AF4: void std::thread::_Invoker<std::tuple<void (*)(int), int> >::_M_invoke<0ul, 1ul>(std::_Index_tuple<0ul, 1ul>) (std_thread.h:259)
==5144==    by 0x13995B: std::thread::_Invoker<std::tuple<void (*)(int), int> >::operator()() (std_thread.h:266)
==5144==    by 0x139827: std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)(int), int> > >::_M_run() (std_thread.h:211)
==5144==    by 0x494F252: ??? (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.30)
==5144==    by 0x485396A: ??? (in /usr/libexec/valgrind/vgpreload_helgrind-amd64-linux.so)
==5144==    by 0x4B53AC2: start_thread (pthread_create.c:442)
==5144==    by 0x4BE4A03: clone (clone.S:100)
==5144== 
==5144== This conflicts with a previous write of size 8 by thread #2
==5144== Locks held: none
==5144==    at 0x139FB2: std::__invoke_result<void (*)(int), int>::type std::__invoke<void (*)(int), int>(void (*&&)(int), int&&) (invoke.h:96)
==5144==    by 0x139AF4: void std::thread::_Invoker<std::tuple<void (*)(int), int> >::_M_invoke<0ul, 1ul>(std::_Index_tuple<0ul, 1ul>) (std_thread.h:259)
==5144==    by 0x13995B: std::thread::_Invoker<std::tuple<void (*)(int), int> >::operator()() (std_thread.h:266)
==5144==    by 0x139827: std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)(int), int> > >::_M_run() (std_thread.h:211)
==5144==    by 0x494F252: ??? (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.30)
==5144==    by 0x485396A: ??? (in /usr/libexec/valgrind/vgpreload_helgrind-amd64-linux.so)
==5144==    by 0x4B53AC2: start_thread (pthread_create.c:442)
==5144==    by 0x4BE4A03: clone (clone.S:100)
==5144==  Address 0x155a70 is 16 bytes inside data symbol "__gcov0._ZSt8__invokeIPFviEJiEENSt15__invoke_resultIT_JDpT0_EE4typeEOS3_DpOS4_"
==5144== 
==5144== ----------------------------------------------------------------
==5144== 
==5144== Possible data race during read of size 8 at 0x155820 by thread #3
==5144== Locks held: none
==5144==    at 0x13A782: void std::__invoke_impl<void, void (*)(int), int>(std::__invoke_other, void (*&&)(int), int&&) (invoke.h:60)
==5144==    by 0x139FC3: std::__invoke_result<void (*)(int), int>::type std::__invoke<void (*)(int), int>(void (*&&)(int), int&&) (invoke.h:96)
==5144==    by 0x139AF4: void std::thread::_Invoker<std::tuple<void (*)(int), int> >::_M_invoke<0ul, 1ul>(std::_Index_tuple<0ul, 1ul>) (std_thread.h:259)
==5144==    by 0x13995B: std::thread::_Invoker<std::tuple<void (*)(int), int> >::operator()() (std_thread.h:266)
==5144==    by 0x139827: std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)(int), int> > >::_M_run() (std_thread.h:211)
==5144==    by 0x494F252: ??? (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.30)
==5144==    by 0x485396A: ??? (in /usr/libexec/valgrind/vgpreload_helgrind-amd64-linux.so)
==5144==    by 0x4B53AC2: start_thread (pthread_create.c:442)
==5144==    by 0x4BE4A03: clone (clone.S:100)
==5144== 
==5144== This conflicts with a previous write of size 8 by thread #2
==5144== Locks held: none
==5144==    at 0x13A78D: void std::__invoke_impl<void, void (*)(int), int>(std::__invoke_other, void (*&&)(int), int&&) (invoke.h:60)
==5144==    by 0x139FC3: std::__invoke_result<void (*)(int), int>::type std::__invoke<void (*)(int), int>(void (*&&)(int), int&&) (invoke.h:96)
==5144==    by 0x139AF4: void std::thread::_Invoker<std::tuple<void (*)(int), int> >::_M_invoke<0ul, 1ul>(std::_Index_tuple<0ul, 1ul>) (std_thread.h:259)
==5144==    by 0x13995B: std::thread::_Invoker<std::tuple<void (*)(int), int> >::operator()() (std_thread.h:266)
==5144==    by 0x139827: std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)(int), int> > >::_M_run() (std_thread.h:211)
==5144==    by 0x494F252: ??? (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.30)
==5144==    by 0x485396A: ??? (in /usr/libexec/valgrind/vgpreload_helgrind-amd64-linux.so)
==5144==    by 0x4B53AC2: start_thread (pthread_create.c:442)
==5144==  Address 0x155820 is 0 bytes inside data symbol "__gcov0._ZSt13__invoke_implIvPFviEJiEET_St14__invoke_otherOT0_DpOT1_"
==5144== 
==5144== ----------------------------------------------------------------
==5144== 
==5144== Possible data race during write of size 8 at 0x155820 by thread #3
==5144== Locks held: none
==5144==    at 0x13A78D: void std::__invoke_impl<void, void (*)(int), int>(std::__invoke_other, void (*&&)(int), int&&) (invoke.h:60)
==5144==    by 0x139FC3: std::__invoke_result<void (*)(int), int>::type std::__invoke<void (*)(int), int>(void (*&&)(int), int&&) (invoke.h:96)
==5144==    by 0x139AF4: void std::thread::_Invoker<std::tuple<void (*)(int), int> >::_M_invoke<0ul, 1ul>(std::_Index_tuple<0ul, 1ul>) (std_thread.h:259)
==5144==    by 0x13995B: std::thread::_Invoker<std::tuple<void (*)(int), int> >::operator()() (std_thread.h:266)
==5144==    by 0x139827: std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)(int), int> > >::_M_run() (std_thread.h:211)
==5144==    by 0x494F252: ??? (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.30)
==5144==    by 0x485396A: ??? (in /usr/libexec/valgrind/vgpreload_helgrind-amd64-linux.so)
==5144==    by 0x4B53AC2: start_thread (pthread_create.c:442)
==5144==    by 0x4BE4A03: clone (clone.S:100)
==5144== 
==5144== This conflicts with a previous write of size 8 by thread #2
==5144== Locks held: none
==5144==    at 0x13A78D: void std::__invoke_impl<void, void (*)(int), int>(std::__invoke_other, void (*&&)(int), int&&) (invoke.h:60)
==5144==    by 0x139FC3: std::__invoke_result<void (*)(int), int>::type std::__invoke<void (*)(int), int>(void (*&&)(int), int&&) (invoke.h:96)
==5144==    by 0x139AF4: void std::thread::_Invoker<std::tuple<void (*)(int), int> >::_M_invoke<0ul, 1ul>(std::_Index_tuple<0ul, 1ul>) (std_thread.h:259)
==5144==    by 0x13995B: std::thread::_Invoker<std::tuple<void (*)(int), int> >::operator()() (std_thread.h:266)
==5144==    by 0x139827: std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)(int), int> > >::_M_run() (std_thread.h:211)
==5144==    by 0x494F252: ??? (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.30)
==5144==    by 0x485396A: ??? (in /usr/libexec/valgrind/vgpreload_helgrind-amd64-linux.so)
==5144==    by 0x4B53AC2: start_thread (pthread_create.c:442)
==5144==  Address 0x155820 is 0 bytes inside data symbol "__gcov0._ZSt13__invoke_implIvPFviEJiEET_St14__invoke_otherOT0_DpOT1_"
==5144== 
==5144== ----------------------------------------------------------------
==5144== 
==5144== Possible data race during read of size 8 at 0x155828 by thread #3
==5144== Locks held: none
==5144==    at 0x13A7A0: void std::__invoke_impl<void, void (*)(int), int>(std::__invoke_other, void (*&&)(int), int&&) (invoke.h:61)
==5144==    by 0x139FC3: std::__invoke_result<void (*)(int), int>::type std::__invoke<void (*)(int), int>(void (*&&)(int), int&&) (invoke.h:96)
==5144==    by 0x139AF4: void std::thread::_Invoker<std::tuple<void (*)(int), int> >::_M_invoke<0ul, 1ul>(std::_Index_tuple<0ul, 1ul>) (std_thread.h:259)
==5144==    by 0x13995B: std::thread::_Invoker<std::tuple<void (*)(int), int> >::operator()() (std_thread.h:266)
==5144==    by 0x139827: std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)(int), int> > >::_M_run() (std_thread.h:211)
==5144==    by 0x494F252: ??? (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.30)
==5144==    by 0x485396A: ??? (in /usr/libexec/valgrind/vgpreload_helgrind-amd64-linux.so)
==5144==    by 0x4B53AC2: start_thread (pthread_create.c:442)
==5144==    by 0x4BE4A03: clone (clone.S:100)
==5144== 
==5144== This conflicts with a previous write of size 8 by thread #2
==5144== Locks held: none
==5144==    at 0x13A7AB: void std::__invoke_impl<void, void (*)(int), int>(std::__invoke_other, void (*&&)(int), int&&) (invoke.h:61)
==5144==    by 0x139FC3: std::__invoke_result<void (*)(int), int>::type std::__invoke<void (*)(int), int>(void (*&&)(int), int&&) (invoke.h:96)
==5144==    by 0x139AF4: void std::thread::_Invoker<std::tuple<void (*)(int), int> >::_M_invoke<0ul, 1ul>(std::_Index_tuple<0ul, 1ul>) (std_thread.h:259)
==5144==    by 0x13995B: std::thread::_Invoker<std::tuple<void (*)(int), int> >::operator()() (std_thread.h:266)
==5144==    by 0x139827: std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)(int), int> > >::_M_run() (std_thread.h:211)
==5144==    by 0x494F252: ??? (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.30)
==5144==    by 0x485396A: ??? (in /usr/libexec/valgrind/vgpreload_helgrind-amd64-linux.so)
==5144==    by 0x4B53AC2: start_thread (pthread_create.c:442)
==5144==  Address 0x155828 is 8 bytes inside data symbol "__gcov0._ZSt13__invoke_implIvPFviEJiEET_St14__invoke_otherOT0_DpOT1_"
==5144== 
==5144== ----------------------------------------------------------------
==5144== 
==5144== Possible data race during write of size 8 at 0x155828 by thread #3
==5144== Locks held: none
==5144==    at 0x13A7AB: void std::__invoke_impl<void, void (*)(int), int>(std::__invoke_other, void (*&&)(int), int&&) (invoke.h:61)
==5144==    by 0x139FC3: std::__invoke_result<void (*)(int), int>::type std::__invoke<void (*)(int), int>(void (*&&)(int), int&&) (invoke.h:96)
==5144==    by 0x139AF4: void std::thread::_Invoker<std::tuple<void (*)(int), int> >::_M_invoke<0ul, 1ul>(std::_Index_tuple<0ul, 1ul>) (std_thread.h:259)
==5144==    by 0x13995B: std::thread::_Invoker<std::tuple<void (*)(int), int> >::operator()() (std_thread.h:266)
==5144==    by 0x139827: std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)(int), int> > >::_M_run() (std_thread.h:211)
==5144==    by 0x494F252: ??? (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.30)
==5144==    by 0x485396A: ??? (in /usr/libexec/valgrind/vgpreload_helgrind-amd64-linux.so)
==5144==    by 0x4B53AC2: start_thread (pthread_create.c:442)
==5144==    by 0x4BE4A03: clone (clone.S:100)
==5144== 
==5144== This conflicts with a previous write of size 8 by thread #2
==5144== Locks held: none
==5144==    at 0x13A7AB: void std::__invoke_impl<void, void (*)(int), int>(std::__invoke_other, void (*&&)(int), int&&) (invoke.h:61)
==5144==    by 0x139FC3: std::__invoke_result<void (*)(int), int>::type std::__invoke<void (*)(int), int>(void (*&&)(int), int&&) (invoke.h:96)
==5144==    by 0x139AF4: void std::thread::_Invoker<std::tuple<void (*)(int), int> >::_M_invoke<0ul, 1ul>(std::_Index_tuple<0ul, 1ul>) (std_thread.h:259)
==5144==    by 0x13995B: std::thread::_Invoker<std::tuple<void (*)(int), int> >::operator()() (std_thread.h:266)
==5144==    by 0x139827: std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)(int), int> > >::_M_run() (std_thread.h:211)
==5144==    by 0x494F252: ??? (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.30)
==5144==    by 0x485396A: ??? (in /usr/libexec/valgrind/vgpreload_helgrind-amd64-linux.so)
==5144==    by 0x4B53AC2: start_thread (pthread_create.c:442)
==5144==  Address 0x155828 is 8 bytes inside data symbol "__gcov0._ZSt13__invoke_implIvPFviEJiEET_St14__invoke_otherOT0_DpOT1_"
==5144== 
==5144== ----------------------------------------------------------------
==5144== 
==5144== Possible data race during read of size 8 at 0x155830 by thread #3
==5144== Locks held: none
==5144==    at 0x13A7C1: void std::__invoke_impl<void, void (*)(int), int>(std::__invoke_other, void (*&&)(int), int&&) (invoke.h:61)
==5144==    by 0x139FC3: std::__invoke_result<void (*)(int), int>::type std::__invoke<void (*)(int), int>(void (*&&)(int), int&&) (invoke.h:96)
==5144==    by 0x139AF4: void std::thread::_Invoker<std::tuple<void (*)(int), int> >::_M_invoke<0ul, 1ul>(std::_Index_tuple<0ul, 1ul>) (std_thread.h:259)
==5144==    by 0x13995B: std::thread::_Invoker<std::tuple<void (*)(int), int> >::operator()() (std_thread.h:266)
==5144==    by 0x139827: std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)(int), int> > >::_M_run() (std_thread.h:211)
==5144==    by 0x494F252: ??? (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.30)
==5144==    by 0x485396A: ??? (in /usr/libexec/valgrind/vgpreload_helgrind-amd64-linux.so)
==5144==    by 0x4B53AC2: start_thread (pthread_create.c:442)
==5144==    by 0x4BE4A03: clone (clone.S:100)
==5144== 
==5144== This conflicts with a previous write of size 8 by thread #2
==5144== Locks held: none
==5144==    at 0x13A7CC: void std::__invoke_impl<void, void (*)(int), int>(std::__invoke_other, void (*&&)(int), int&&) (invoke.h:61)
==5144==    by 0x139FC3: std::__invoke_result<void (*)(int), int>::type std::__invoke<void (*)(int), int>(void (*&&)(int), int&&) (invoke.h:96)
==5144==    by 0x139AF4: void std::thread::_Invoker<std::tuple<void (*)(int), int> >::_M_invoke<0ul, 1ul>(std::_Index_tuple<0ul, 1ul>) (std_thread.h:259)
==5144==    by 0x13995B: std::thread::_Invoker<std::tuple<void (*)(int), int> >::operator()() (std_thread.h:266)
==5144==    by 0x139827: std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)(int), int> > >::_M_run() (std_thread.h:211)
==5144==    by 0x494F252: ??? (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.30)
==5144==    by 0x485396A: ??? (in /usr/libexec/valgrind/vgpreload_helgrind-amd64-linux.so)
==5144==    by 0x4B53AC2: start_thread (pthread_create.c:442)
==5144==  Address 0x155830 is 16 bytes inside data symbol "__gcov0._ZSt13__invoke_implIvPFviEJiEET_St14__invoke_otherOT0_DpOT1_"
==5144== 
==5144== ----------------------------------------------------------------
==5144== 
==5144== Possible data race during write of size 8 at 0x155830 by thread #3
==5144== Locks held: none
==5144==    at 0x13A7CC: void std::__invoke_impl<void, void (*)(int), int>(std::__invoke_other, void (*&&)(int), int&&) (invoke.h:61)
==5144==    by 0x139FC3: std::__invoke_result<void (*)(int), int>::type std::__invoke<void (*)(int), int>(void (*&&)(int), int&&) (invoke.h:96)
==5144==    by 0x139AF4: void std::thread::_Invoker<std::tuple<void (*)(int), int> >::_M_invoke<0ul, 1ul>(std::_Index_tuple<0ul, 1ul>) (std_thread.h:259)
==5144==    by 0x13995B: std::thread::_Invoker<std::tuple<void (*)(int), int> >::operator()() (std_thread.h:266)
==5144==    by 0x139827: std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)(int), int> > >::_M_run() (std_thread.h:211)
==5144==    by 0x494F252: ??? (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.30)
==5144==    by 0x485396A: ??? (in /usr/libexec/valgrind/vgpreload_helgrind-amd64-linux.so)
==5144==    by 0x4B53AC2: start_thread (pthread_create.c:442)
==5144==    by 0x4BE4A03: clone (clone.S:100)
==5144== 
==5144== This conflicts with a previous write of size 8 by thread #2
==5144== Locks held: none
==5144==    at 0x13A7CC: void std::__invoke_impl<void, void (*)(int), int>(std::__invoke_other, void (*&&)(int), int&&) (invoke.h:61)
==5144==    by 0x139FC3: std::__invoke_result<void (*)(int), int>::type std::__invoke<void (*)(int), int>(void (*&&)(int), int&&) (invoke.h:96)
==5144==    by 0x139AF4: void std::thread::_Invoker<std::tuple<void (*)(int), int> >::_M_invoke<0ul, 1ul>(std::_Index_tuple<0ul, 1ul>) (std_thread.h:259)
==5144==    by 0x13995B: std::thread::_Invoker<std::tuple<void (*)(int), int> >::operator()() (std_thread.h:266)
==5144==    by 0x139827: std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)(int), int> > >::_M_run() (std_thread.h:211)
==5144==    by 0x494F252: ??? (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.30)
==5144==    by 0x485396A: ??? (in /usr/libexec/valgrind/vgpreload_helgrind-amd64-linux.so)
==5144==    by 0x4B53AC2: start_thread (pthread_create.c:442)
==5144==  Address 0x155830 is 16 bytes inside data symbol "__gcov0._ZSt13__invoke_implIvPFviEJiEET_St14__invoke_otherOT0_DpOT1_"
==5144== 
==5144== ----------------------------------------------------------------
==5144== 
==5144== Possible data race during read of size 8 at 0x15B5E0 by thread #3
==5144== Locks held: none
==5144==    at 0x11DE49: threadWork(int) (main.cpp:100)
==5144==    by 0x13A7D8: void std::__invoke_impl<void, void (*)(int), int>(std::__invoke_other, void (*&&)(int), int&&) (invoke.h:61)
==5144==    by 0x139FC3: std::__invoke_result<void (*)(int), int>::type std::__invoke<void (*)(int), int>(void (*&&)(int), int&&) (invoke.h:96)
==5144==    by 0x139AF4: void std::thread::_Invoker<std::tuple<void (*)(int), int> >::_M_invoke<0ul, 1ul>(std::_Index_tuple<0ul, 1ul>) (std_thread.h:259)
==5144==    by 0x13995B: std::thread::_Invoker<std::tuple<void (*)(int), int> >::operator()() (std_thread.h:266)
==5144==    by 0x139827: std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)(int), int> > >::_M_run() (std_thread.h:211)
==5144==    by 0x494F252: ??? (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.30)
==5144==    by 0x485396A: ??? (in /usr/libexec/valgrind/vgpreload_helgrind-amd64-linux.so)
==5144==    by 0x4B53AC2: start_thread (pthread_create.c:442)
==5144==    by 0x4BE4A03: clone (clone.S:100)
==5144== 
==5144== This conflicts with a previous write of size 8 by thread #2
==5144== Locks held: none
==5144==    at 0x11DE54: threadWork(int) (main.cpp:100)
==5144==    by 0x13A7D8: void std::__invoke_impl<void, void (*)(int), int>(std::__invoke_other, void (*&&)(int), int&&) (invoke.h:61)
==5144==    by 0x139FC3: std::__invoke_result<void (*)(int), int>::type std::__invoke<void (*)(int), int>(void (*&&)(int), int&&) (invoke.h:96)
==5144==    by 0x139AF4: void std::thread::_Invoker<std::tuple<void (*)(int), int> >::_M_invoke<0ul, 1ul>(std::_Index_tuple<0ul, 1ul>) (std_thread.h:259)
==5144==    by 0x13995B: std::thread::_Invoker<std::tuple<void (*)(int), int> >::operator()() (std_thread.h:266)
==5144==    by 0x139827: std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)(int), int> > >::_M_run() (std_thread.h:211)
==5144==    by 0x494F252: ??? (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.30)
==5144==    by 0x485396A: ??? (in /usr/libexec/valgrind/vgpreload_helgrind-amd64-linux.so)
==5144==  Address 0x15b5e0 is 0 bytes inside data symbol "__gcov0._Z10threadWorki"
==5144== 
==5144== ----------------------------------------------------------------
==5144== 
==5144== Possible data race during write of size 8 at 0x15B5E0 by thread #3
==5144== Locks held: none
==5144==    at 0x11DE54: threadWork(int) (main.cpp:100)
==5144==    by 0x13A7D8: void std::__invoke_impl<void, void (*)(int), int>(std::__invoke_other, void (*&&)(int), int&&) (invoke.h:61)
==5144==    by 0x139FC3: std::__invoke_result<void (*)(int), int>::type std::__invoke<void (*)(int), int>(void (*&&)(int), int&&) (invoke.h:96)
==5144==    by 0x139AF4: void std::thread::_Invoker<std::tuple<void (*)(int), int> >::_M_invoke<0ul, 1ul>(std::_Index_tuple<0ul, 1ul>) (std_thread.h:259)
==5144==    by 0x13995B: std::thread::_Invoker<std::tuple<void (*)(int), int> >::operator()() (std_thread.h:266)
==5144==    by 0x139827: std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)(int), int> > >::_M_run() (std_thread.h:211)
==5144==    by 0x494F252: ??? (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.30)
==5144==    by 0x485396A: ??? (in /usr/libexec/valgrind/vgpreload_helgrind-amd64-linux.so)
==5144==    by 0x4B53AC2: start_thread (pthread_create.c:442)
==5144==    by 0x4BE4A03: clone (clone.S:100)
==5144== 
==5144== This conflicts with a previous write of size 8 by thread #2
==5144== Locks held: none
==5144==    at 0x11DE54: threadWork(int) (main.cpp:100)
==5144==    by 0x13A7D8: void std::__invoke_impl<void, void (*)(int), int>(std::__invoke_other, void (*&&)(int), int&&) (invoke.h:61)
==5144==    by 0x139FC3: std::__invoke_result<void (*)(int), int>::type std::__invoke<void (*)(int), int>(void (*&&)(int), int&&) (invoke.h:96)
==5144==    by 0x139AF4: void std::thread::_Invoker<std::tuple<void (*)(int), int> >::_M_invoke<0ul, 1ul>(std::_Index_tuple<0ul, 1ul>) (std_thread.h:259)
==5144==    by 0x13995B: std::thread::_Invoker<std::tuple<void (*)(int), int> >::operator()() (std_thread.h:266)
==5144==    by 0x139827: std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)(int), int> > >::_M_run() (std_thread.h:211)
==5144==    by 0x494F252: ??? (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.30)
==5144==    by 0x485396A: ??? (in /usr/libexec/valgrind/vgpreload_helgrind-amd64-linux.so)
==5144==  Address 0x15b5e0 is 0 bytes inside data symbol "__gcov0._Z10threadWorki"
==5144== 
==5144== ----------------------------------------------------------------
==5144== 
==5144== Possible data race during read of size 8 at 0x15A310 by thread #3
==5144== Locks held: none
==5144==    at 0x1256E0: std::unique_lock<std::mutex>::unique_lock(std::mutex&) (unique_lock.h:66)
==5144==    by 0x11DE77: threadWork(int) (main.cpp:105)
==5144==    by 0x13A7D8: void std::__invoke_impl<void, void (*)(int), int>(std::__invoke_other, void (*&&)(int), int&&) (invoke.h:61)
==5144==    by 0x139FC3: std::__invoke_result<void (*)(int), int>::type std::__invoke<void (*)(int), int>(void (*&&)(int), int&&) (invoke.h:96)
==5144==    by 0x139AF4: void std::thread::_Invoker<std::tuple<void (*)(int), int> >::_M_invoke<0ul, 1ul>(std::_Index_tuple<0ul, 1ul>) (std_thread.h:259)
==5144==    by 0x13995B: std::thread::_Invoker<std::tuple<void (*)(int), int> >::operator()() (std_thread.h:266)
==5144==    by 0x139827: std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)(int), int> > >::_M_run() (std_thread.h:211)
==5144==    by 0x494F252: ??? (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.30)
==5144==    by 0x485396A: ??? (in /usr/libexec/valgrind/vgpreload_helgrind-amd64-linux.so)
==5144==    by 0x4B53AC2: start_thread (pthread_create.c:442)
==5144==    by 0x4BE4A03: clone (clone.S:100)
==5144== 
==5144== This conflicts with a previous write of size 8 by thread #2
==5144== Locks held: none
==5144==    at 0x1256EB: std::unique_lock<std::mutex>::unique_lock(std::mutex&) (unique_lock.h:66)
==5144==    by 0x11DE77: threadWork(int) (main.cpp:105)
==5144==    by 0x13A7D8: void std::__invoke_impl<void, void (*)(int), int>(std::__invoke_other, void (*&&)(int), int&&) (invoke.h:61)
==5144==    by 0x139FC3: std::__invoke_result<void (*)(int), int>::type std::__invoke<void (*)(int), int>(void (*&&)(int), int&&) (invoke.h:96)
==5144==    by 0x139AF4: void std::thread::_Invoker<std::tuple<void (*)(int), int> >::_M_invoke<0ul, 1ul>(std::_Index_tuple<0ul, 1ul>) (std_thread.h:259)
==5144==    by 0x13995B: std::thread::_Invoker<std::tuple<void (*)(int), int> >::operator()() (std_thread.h:266)
==5144==    by 0x139827: std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)(int), int> > >::_M_run() (std_thread.h:211)
==5144==    by 0x494F252: ??? (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.30)
==5144==  Address 0x15a310 is 0 bytes inside data symbol "__gcov0._ZNSt11unique_lockISt5mutexEC2ERS0_"
==5144== 
==5144== ----------------------------------------------------------------
==5144== 
==5144== Possible data race during write of size 8 at 0x15A310 by thread #3
==5144== Locks held: none
==5144==    at 0x1256EB: std::unique_lock<std::mutex>::unique_lock(std::mutex&) (unique_lock.h:66)
==5144==    by 0x11DE77: threadWork(int) (main.cpp:105)
==5144==    by 0x13A7D8: void std::__invoke_impl<void, void (*)(int), int>(std::__invoke_other, void (*&&)(int), int&&) (invoke.h:61)
==5144==    by 0x139FC3: std::__invoke_result<void (*)(int), int>::type std::__invoke<void (*)(int), int>(void (*&&)(int), int&&) (invoke.h:96)
==5144==    by 0x139AF4: void std::thread::_Invoker<std::tuple<void (*)(int), int> >::_M_invoke<0ul, 1ul>(std::_Index_tuple<0ul, 1ul>) (std_thread.h:259)
==5144==    by 0x13995B: std::thread::_Invoker<std::tuple<void (*)(int), int> >::operator()() (std_thread.h:266)
==5144==    by 0x139827: std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)(int), int> > >::_M_run() (std_thread.h:211)
==5144==    by 0x494F252: ??? (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.30)
==5144==    by 0x485396A: ??? (in /usr/libexec/valgrind/vgpreload_helgrind-amd64-linux.so)
==5144==    by 0x4B53AC2: start_thread (pthread_create.c:442)
==5144==    by 0x4BE4A03: clone (clone.S:100)
==5144== 
==5144== This conflicts with a previous write of size 8 by thread #2
==5144== Locks held: none
==5144==    at 0x1256EB: std::unique_lock<std::mutex>::unique_lock(std::mutex&) (unique_lock.h:66)
==5144==    by 0x11DE77: threadWork(int) (main.cpp:105)
==5144==    by 0x13A7D8: void std::__invoke_impl<void, void (*)(int), int>(std::__invoke_other, void (*&&)(int), int&&) (invoke.h:61)
==5144==    by 0x139FC3: std::__invoke_result<void (*)(int), int>::type std::__invoke<void (*)(int), int>(void (*&&)(int), int&&) (invoke.h:96)
==5144==    by 0x139AF4: void std::thread::_Invoker<std::tuple<void (*)(int), int> >::_M_invoke<0ul, 1ul>(std::_Index_tuple<0ul, 1ul>) (std_thread.h:259)
==5144==    by 0x13995B: std::thread::_Invoker<std::tuple<void (*)(int), int> >::operator()() (std_thread.h:266)
==5144==    by 0x139827: std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)(int), int> > >::_M_run() (std_thread.h:211)
==5144==    by 0x494F252: ??? (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.30)
==5144==  Address 0x15a310 is 0 bytes inside data symbol "__gcov0._ZNSt11unique_lockISt5mutexEC2ERS0_"
==5144== 
==5144== ----------------------------------------------------------------
==5144== 
==5144== Possible data race during read of size 8 at 0x159560 by thread #3
==5144== Locks held: none
==5144==    at 0x1296D7: std::mutex* std::__addressof<std::mutex>(std::mutex&) (move.h:49)
==5144==    by 0x1256FD: std::unique_lock<std::mutex>::unique_lock(std::mutex&) (unique_lock.h:67)
==5144==    by 0x11DE77: threadWork(int) (main.cpp:105)
==5144==    by 0x13A7D8: void std::__invoke_impl<void, void (*)(int), int>(std::__invoke_other, void (*&&)(int), int&&) (invoke.h:61)
==5144==    by 0x139FC3: std::__invoke_result<void (*)(int), int>::type std::__invoke<void (*)(int), int>(void (*&&)(int), int&&) (invoke.h:96)
==5144==    by 0x139AF4: void std::thread::_Invoker<std::tuple<void (*)(int), int> >::_M_invoke<0ul, 1ul>(std::_Index_tuple<0ul, 1ul>) (std_thread.h:259)
==5144==    by 0x13995B: std::thread::_Invoker<std::tuple<void (*)(int), int> >::operator()() (std_thread.h:266)
==5144==    by 0x139827: std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)(int), int> > >::_M_run() (std_thread.h:211)
==5144==    by 0x494F252: ??? (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.30)
==5144==    by 0x485396A: ??? (in /usr/libexec/valgrind/vgpreload_helgrind-amd64-linux.so)
==5144==    by 0x4B53AC2: start_thread (pthread_create.c:442)
==5144==    by 0x4BE4A03: clone (clone.S:100)
==5144== 
==5144== This conflicts with a previous write of size 8 by thread #2
==5144== Locks held: none
==5144==    at 0x1296E2: std::mutex* std::__addressof<std::mutex>(std::mutex&) (move.h:49)
==5144==    by 0x1256FD: std::unique_lock<std::mutex>::unique_lock(std::mutex&) (unique_lock.h:67)
==5144==    by 0x11DE77: threadWork(int) (main.cpp:105)
==5144==    by 0x13A7D8: void std::__invoke_impl<void, void (*)(int), int>(std::__invoke_other, void (*&&)(int), int&&) (invoke.h:61)
==5144==    by 0x139FC3: std::__invoke_result<void (*)(int), int>::type std::__invoke<void (*)(int), int>(void (*&&)(int), int&&) (invoke.h:96)
==5144==    by 0x139AF4: void std::thread::_Invoker<std::tuple<void (*)(int), int> >::_M_invoke<0ul, 1ul>(std::_Index_tuple<0ul, 1ul>) (std_thread.h:259)
==5144==    by 0x13995B: std::thread::_Invoker<std::tuple<void (*)(int), int> >::operator()() (std_thread.h:266)
==5144==    by 0x139827: std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)(int), int> > >::_M_run() (std_thread.h:211)
==5144==  Address 0x159560 is 0 bytes inside data symbol "__gcov0._ZSt11__addressofISt5mutexEPT_RS1_"
==5144== 
==5144== ----------------------------------------------------------------
==5144== 
==5144== Possible data race during write of size 8 at 0x159560 by thread #3
==5144== Locks held: none
==5144==    at 0x1296E2: std::mutex* std::__addressof<std::mutex>(std::mutex&) (move.h:49)
==5144==    by 0x1256FD: std::unique_lock<std::mutex>::unique_lock(std::mutex&) (unique_lock.h:67)
==5144==    by 0x11DE77: threadWork(int) (main.cpp:105)
==5144==    by 0x13A7D8: void std::__invoke_impl<void, void (*)(int), int>(std::__invoke_other, void (*&&)(int), int&&) (invoke.h:61)
==5144==    by 0x139FC3: std::__invoke_result<void (*)(int), int>::type std::__invoke<void (*)(int), int>(void (*&&)(int), int&&) (invoke.h:96)
==5144==    by 0x139AF4: void std::thread::_Invoker<std::tuple<void (*)(int), int> >::_M_invoke<0ul, 1ul>(std::_Index_tuple<0ul, 1ul>) (std_thread.h:259)
==5144==    by 0x13995B: std::thread::_Invoker<std::tuple<void (*)(int), int> >::operator()() (std_thread.h:266)
==5144==    by 0x139827: std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)(int), int> > >::_M_run() (std_thread.h:211)
==5144==    by 0x494F252: ??? (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.30)
==5144==    by 0x485396A: ??? (in /usr/libexec/valgrind/vgpreload_helgrind-amd64-linux.so)
==5144==    by 0x4B53AC2: start_thread (pthread_create.c:442)
==5144==    by 0x4BE4A03: clone (clone.S:100)
==5144== 
==5144== This conflicts with a previous write of size 8 by thread #2
==5144== Locks held: none
==5144==    at 0x1296E2: std::mutex* std::__addressof<std::mutex>(std::mutex&) (move.h:49)
==5144==    by 0x1256FD: std::unique_lock<std::mutex>::unique_lock(std::mutex&) (unique_lock.h:67)
==5144==    by 0x11DE77: threadWork(int) (main.cpp:105)
==5144==    by 0x13A7D8: void std::__invoke_impl<void, void (*)(int), int>(std::__invoke_other, void (*&&)(int), int&&) (invoke.h:61)
==5144==    by 0x139FC3: std::__invoke_result<void (*)(int), int>::type std::__invoke<void (*)(int), int>(void (*&&)(int), int&&) (invoke.h:96)
==5144==    by 0x139AF4: void std::thread::_Invoker<std::tuple<void (*)(int), int> >::_M_invoke<0ul, 1ul>(std::_Index_tuple<0ul, 1ul>) (std_thread.h:259)
==5144==    by 0x13995B: std::thread::_Invoker<std::tuple<void (*)(int), int> >::operator()() (std_thread.h:266)
==5144==    by 0x139827: std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)(int), int> > >::_M_run() (std_thread.h:211)
==5144==  Address 0x159560 is 0 bytes inside data symbol "__gcov0._ZSt11__addressofISt5mutexEPT_RS1_"
==5144== 
==5144== ----------------------------------------------------------------
==5144== 
==5144== Possible data race during read of size 8 at 0x15A318 by thread #3
==5144== Locks held: none
==5144==    at 0x1256FE: std::unique_lock<std::mutex>::unique_lock(std::mutex&) (unique_lock.h:67)
==5144==    by 0x11DE77: threadWork(int) (main.cpp:105)
==5144==    by 0x13A7D8: void std::__invoke_impl<void, void (*)(int), int>(std::__invoke_other, void (*&&)(int), int&&) (invoke.h:61)
==5144==    by 0x139FC3: std::__invoke_result<void (*)(int), int>::type std::__invoke<void (*)(int), int>(void (*&&)(int), int&&) (invoke.h:96)
==5144==    by 0x139AF4: void std::thread::_Invoker<std::tuple<void (*)(int), int> >::_M_invoke<0ul, 1ul>(std::_Index_tuple<0ul, 1ul>) (std_thread.h:259)
==5144==    by 0x13995B: std::thread::_Invoker<std::tuple<void (*)(int), int> >::operator()() (std_thread.h:266)
==5144==    by 0x139827: std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)(int), int> > >::_M_run() (std_thread.h:211)
==5144==    by 0x494F252: ??? (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.30)
==5144==    by 0x485396A: ??? (in /usr/libexec/valgrind/vgpreload_helgrind-amd64-linux.so)
==5144==    by 0x4B53AC2: start_thread (pthread_create.c:442)
==5144==    by 0x4BE4A03: clone (clone.S:100)
==5144== 
==5144== This conflicts with a previous write of size 8 by thread #2
==5144== Locks held: none
==5144==    at 0x125709: std::unique_lock<std::mutex>::unique_lock(std::mutex&) (unique_lock.h:67)
==5144==    by 0x11DE77: threadWork(int) (main.cpp:105)
==5144==    by 0x13A7D8: void std::__invoke_impl<void, void (*)(int), int>(std::__invoke_other, void (*&&)(int), int&&) (invoke.h:61)
==5144==    by 0x139FC3: std::__invoke_result<void (*)(int), int>::type std::__invoke<void (*)(int), int>(void (*&&)(int), int&&) (invoke.h:96)
==5144==    by 0x139AF4: void std::thread::_Invoker<std::tuple<void (*)(int), int> >::_M_invoke<0ul, 1ul>(std::_Index_tuple<0ul, 1ul>) (std_thread.h:259)
==5144==    by 0x13995B: std::thread::_Invoker<std::tuple<void (*)(int), int> >::operator()() (std_thread.h:266)
==5144==    by 0x139827: std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)(int), int> > >::_M_run() (std_thread.h:211)
==5144==    by 0x494F252: ??? (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.30)
==5144==  Address 0x15a318 is 8 bytes inside data symbol "__gcov0._ZNSt11unique_lockISt5mutexEC2ERS0_"
==5144== 
==5144== ----------------------------------------------------------------
==5144== 
==5144== Possible data race during write of size 8 at 0x15A318 by thread #3
==5144== Locks held: none
==5144==    at 0x125709: std::unique_lock<std::mutex>::unique_lock(std::mutex&) (unique_lock.h:67)
==5144==    by 0x11DE77: threadWork(int) (main.cpp:105)
==5144==    by 0x13A7D8: void std::__invoke_impl<void, void (*)(int), int>(std::__invoke_other, void (*&&)(int), int&&) (invoke.h:61)
==5144==    by 0x139FC3: std::__invoke_result<void (*)(int), int>::type std::__invoke<void (*)(int), int>(void (*&&)(int), int&&) (invoke.h:96)
==5144==    by 0x139AF4: void std::thread::_Invoker<std::tuple<void (*)(int), int> >::_M_invoke<0ul, 1ul>(std::_Index_tuple<0ul, 1ul>) (std_thread.h:259)
==5144==    by 0x13995B: std::thread::_Invoker<std::tuple<void (*)(int), int> >::operator()() (std_thread.h:266)
==5144==    by 0x139827: std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)(int), int> > >::_M_run() (std_thread.h:211)
==5144==    by 0x494F252: ??? (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.30)
==5144==    by 0x485396A: ??? (in /usr/libexec/valgrind/vgpreload_helgrind-amd64-linux.so)
==5144==    by 0x4B53AC2: start_thread (pthread_create.c:442)
==5144==    by 0x4BE4A03: clone (clone.S:100)
==5144== 
==5144== This conflicts with a previous write of size 8 by thread #2
==5144== Locks held: none
==5144==    at 0x125709: std::unique_lock<std::mutex>::unique_lock(std::mutex&) (unique_lock.h:67)
==5144==    by 0x11DE77: threadWork(int) (main.cpp:105)
==5144==    by 0x13A7D8: void std::__invoke_impl<void, void (*)(int), int>(std::__invoke_other, void (*&&)(int), int&&) (invoke.h:61)
==5144==    by 0x139FC3: std::__invoke_result<void (*)(int), int>::type std::__invoke<void (*)(int), int>(void (*&&)(int), int&&) (invoke.h:96)
==5144==    by 0x139AF4: void std::thread::_Invoker<std::tuple<void (*)(int), int> >::_M_invoke<0ul, 1ul>(std::_Index_tuple<0ul, 1ul>) (std_thread.h:259)
==5144==    by 0x13995B: std::thread::_Invoker<std::tuple<void (*)(int), int> >::operator()() (std_thread.h:266)
==5144==    by 0x139827: std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)(int), int> > >::_M_run() (std_thread.h:211)
==5144==    by 0x494F252: ??? (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.30)
==5144==  Address 0x15a318 is 8 bytes inside data symbol "__gcov0._ZNSt11unique_lockISt5mutexEC2ERS0_"
==5144== 
==5144== ----------------------------------------------------------------
==5144== 
==5144== Possible data race during read of size 8 at 0x159540 by thread #3
==5144== Locks held: none
==5144==    at 0x129706: std::unique_lock<std::mutex>::lock() (unique_lock.h:131)
==5144==    by 0x12572A: std::unique_lock<std::mutex>::unique_lock(std::mutex&) (unique_lock.h:69)
==5144==    by 0x11DE77: threadWork(int) (main.cpp:105)
==5144==    by 0x13A7D8: void std::__invoke_impl<void, void (*)(int), int>(std::__invoke_other, void (*&&)(int), int&&) (invoke.h:61)
==5144==    by 0x139FC3: std::__invoke_result<void (*)(int), int>::type std::__invoke<void (*)(int), int>(void (*&&)(int), int&&) (invoke.h:96)
==5144==    by 0x139AF4: void std::thread::_Invoker<std::tuple<void (*)(int), int> >::_M_invoke<0ul, 1ul>(std::_Index_tuple<0ul, 1ul>) (std_thread.h:259)
==5144==    by 0x13995B: std::thread::_Invoker<std::tuple<void (*)(int), int> >::operator()() (std_thread.h:266)
==5144==    by 0x139827: std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)(int), int> > >::_M_run() (std_thread.h:211)
==5144==    by 0x494F252: ??? (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.30)
==5144==    by 0x485396A: ??? (in /usr/libexec/valgrind/vgpreload_helgrind-amd64-linux.so)
==5144==    by 0x4B53AC2: start_thread (pthread_create.c:442)
==5144==    by 0x4BE4A03: clone (clone.S:100)
==5144== 
==5144== This conflicts with a previous write of size 8 by thread #2
==5144== Locks held: none
==5144==    at 0x129711: std::unique_lock<std::mutex>::lock() (unique_lock.h:131)
==5144==    by 0x12572A: std::unique_lock<std::mutex>::unique_lock(std::mutex&) (unique_lock.h:69)
==5144==    by 0x11DE77: threadWork(int) (main.cpp:105)
==5144==    by 0x13A7D8: void std::__invoke_impl<void, void (*)(int), int>(std::__invoke_other, void (*&&)(int), int&&) (invoke.h:61)
==5144==    by 0x139FC3: std::__invoke_result<void (*)(int), int>::type std::__invoke<void (*)(int), int>(void (*&&)(int), int&&) (invoke.h:96)
==5144==    by 0x139AF4: void std::thread::_Invoker<std::tuple<void (*)(int), int> >::_M_invoke<0ul, 1ul>(std::_Index_tuple<0ul, 1ul>) (std_thread.h:259)
==5144==    by 0x13995B: std::thread::_Invoker<std::tuple<void (*)(int), int> >::operator()() (std_thread.h:266)
==5144==    by 0x139827: std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)(int), int> > >::_M_run() (std_thread.h:211)
==5144==  Address 0x159540 is 0 bytes inside data symbol "__gcov0._ZNSt11unique_lockISt5mutexE4lockEv"
==5144== 
==5144== ----------------------------------------------------------------
==5144== 
==5144== Possible data race during write of size 8 at 0x159540 by thread #3
==5144== Locks held: none
==5144==    at 0x129711: std::unique_lock<std::mutex>::lock() (unique_lock.h:131)
==5144==    by 0x12572A: std::unique_lock<std::mutex>::unique_lock(std::mutex&) (unique_lock.h:69)
==5144==    by 0x11DE77: threadWork(int) (main.cpp:105)
==5144==    by 0x13A7D8: void std::__invoke_impl<void, void (*)(int), int>(std::__invoke_other, void (*&&)(int), int&&) (invoke.h:61)
==5144==    by 0x139FC3: std::__invoke_result<void (*)(int), int>::type std::__invoke<void (*)(int), int>(void (*&&)(int), int&&) (invoke.h:96)
==5144==    by 0x139AF4: void std::thread::_Invoker<std::tuple<void (*)(int), int> >::_M_invoke<0ul, 1ul>(std::_Index_tuple<0ul, 1ul>) (std_thread.h:259)
==5144==    by 0x13995B: std::thread::_Invoker<std::tuple<void (*)(int), int> >::operator()() (std_thread.h:266)
==5144==    by 0x139827: std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)(int), int> > >::_M_run() (std_thread.h:211)
==5144==    by 0x494F252: ??? (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.30)
==5144==    by 0x485396A: ??? (in /usr/libexec/valgrind/vgpreload_helgrind-amd64-linux.so)
==5144==    by 0x4B53AC2: start_thread (pthread_create.c:442)
==5144==    by 0x4BE4A03: clone (clone.S:100)
==5144== 
==5144== This conflicts with a previous write of size 8 by thread #2
==5144== Locks held: none
==5144==    at 0x129711: std::unique_lock<std::mutex>::lock() (unique_lock.h:131)
==5144==    by 0x12572A: std::unique_lock<std::mutex>::unique_lock(std::mutex&) (unique_lock.h:69)
==5144==    by 0x11DE77: threadWork(int) (main.cpp:105)
==5144==    by 0x13A7D8: void std::__invoke_impl<void, void (*)(int), int>(std::__invoke_other, void (*&&)(int), int&&) (invoke.h:61)
==5144==    by 0x139FC3: std::__invoke_result<void (*)(int), int>::type std::__invoke<void (*)(int), int>(void (*&&)(int), int&&) (invoke.h:96)
==5144==    by 0x139AF4: void std::thread::_Invoker<std::tuple<void (*)(int), int> >::_M_invoke<0ul, 1ul>(std::_Index_tuple<0ul, 1ul>) (std_thread.h:259)
==5144==    by 0x13995B: std::thread::_Invoker<std::tuple<void (*)(int), int> >::operator()() (std_thread.h:266)
==5144==    by 0x139827: std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)(int), int> > >::_M_run() (std_thread.h:211)
==5144==  Address 0x159540 is 0 bytes inside data symbol "__gcov0._ZNSt11unique_lockISt5mutexE4lockEv"
==5144== 
==5144== ----------------------------------------------------------------
==5144== 
==5144== Possible data race during read of size 8 at 0x15BC20 by thread #3
==5144== Locks held: none
==5144==    at 0x122892: std::mutex::lock() (stl_deque.h:98)
==5144==    by 0x129776: std::unique_lock<std::mutex>::lock() (unique_lock.h:139)
==5144==    by 0x12572A: std::unique_lock<std::mutex>::unique_lock(std::mutex&) (unique_lock.h:69)
==5144==    by 0x11DE77: threadWork(int) (main.cpp:105)
==5144==    by 0x13A7D8: void std::__invoke_impl<void, void (*)(int), int>(std::__invoke_other, void (*&&)(int), int&&) (invoke.h:61)
==5144==    by 0x139FC3: std::__invoke_result<void (*)(int), int>::type std::__invoke<void (*)(int), int>(void (*&&)(int), int&&) (invoke.h:96)
==5144==    by 0x139AF4: void std::thread::_Invoker<std::tuple<void (*)(int), int> >::_M_invoke<0ul, 1ul>(std::_Index_tuple<0ul, 1ul>) (std_thread.h:259)
==5144==    by 0x13995B: std::thread::_Invoker<std::tuple<void (*)(int), int> >::operator()() (std_thread.h:266)
==5144==    by 0x139827: std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)(int), int> > >::_M_run() (std_thread.h:211)
==5144==    by 0x494F252: ??? (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.30)
==5144==    by 0x485396A: ??? (in /usr/libexec/valgrind/vgpreload_helgrind-amd64-linux.so)
==5144==    by 0x4B53AC2: start_thread (pthread_create.c:442)
==5144== 
==5144== This conflicts with a previous write of size 8 by thread #2
==5144== Locks held: none
==5144==    at 0x12289D: std::mutex::lock() (stl_deque.h:98)
==5144==    by 0x129776: std::unique_lock<std::mutex>::lock() (unique_lock.h:139)
==5144==    by 0x12572A: std::unique_lock<std::mutex>::unique_lock(std::mutex&) (unique_lock.h:69)
==5144==    by 0x11DE77: threadWork(int) (main.cpp:105)
==5144==    by 0x13A7D8: void std::__invoke_impl<void, void (*)(int), int>(std::__invoke_other, void (*&&)(int), int&&) (invoke.h:61)
==5144==    by 0x139FC3: std::__invoke_result<void (*)(int), int>::type std::__invoke<void (*)(int), int>(void (*&&)(int), int&&) (invoke.h:96)
==5144==    by 0x139AF4: void std::thread::_Invoker<std::tuple<void (*)(int), int> >::_M_invoke<0ul, 1ul>(std::_Index_tuple<0ul, 1ul>) (std_thread.h:259)
==5144==    by 0x13995B: std::thread::_Invoker<std::tuple<void (*)(int), int> >::operator()() (std_thread.h:266)
==5144==  Address 0x15bc20 is 0 bytes inside data symbol "__gcov0._ZNSt5mutex4lockEv"
==5144== 
==5144== ----------------------------------------------------------------
==5144== 
==5144== Possible data race during write of size 8 at 0x15BC20 by thread #3
==5144== Locks held: none
==5144==    at 0x12289D: std::mutex::lock() (stl_deque.h:98)
==5144==    by 0x129776: std::unique_lock<std::mutex>::lock() (unique_lock.h:139)
==5144==    by 0x12572A: std::unique_lock<std::mutex>::unique_lock(std::mutex&) (unique_lock.h:69)
==5144==    by 0x11DE77: threadWork(int) (main.cpp:105)
==5144==    by 0x13A7D8: void std::__invoke_impl<void, void (*)(int), int>(std::__invoke_other, void (*&&)(int), int&&) (invoke.h:61)
==5144==    by 0x139FC3: std::__invoke_result<void (*)(int), int>::type std::__invoke<void (*)(int), int>(void (*&&)(int), int&&) (invoke.h:96)
==5144==    by 0x139AF4: void std::thread::_Invoker<std::tuple<void (*)(int), int> >::_M_invoke<0ul, 1ul>(std::_Index_tuple<0ul, 1ul>) (std_thread.h:259)
==5144==    by 0x13995B: std::thread::_Invoker<std::tuple<void (*)(int), int> >::operator()() (std_thread.h:266)
==5144==    by 0x139827: std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)(int), int> > >::_M_run() (std_thread.h:211)
==5144==    by 0x494F252: ??? (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.30)
==5144==    by 0x485396A: ??? (in /usr/libexec/valgrind/vgpreload_helgrind-amd64-linux.so)
==5144==    by 0x4B53AC2: start_thread (pthread_create.c:442)
==5144== 
==5144== This conflicts with a previous write of size 8 by thread #2
==5144== Locks held: none
==5144==    at 0x12289D: std::mutex::lock() (stl_deque.h:98)
==5144==    by 0x129776: std::unique_lock<std::mutex>::lock() (unique_lock.h:139)
==5144==    by 0x12572A: std::unique_lock<std::mutex>::unique_lock(std::mutex&) (unique_lock.h:69)
==5144==    by 0x11DE77: threadWork(int) (main.cpp:105)
==5144==    by 0x13A7D8: void std::__invoke_impl<void, void (*)(int), int>(std::__invoke_other, void (*&&)(int), int&&) (invoke.h:61)
==5144==    by 0x139FC3: std::__invoke_result<void (*)(int), int>::type std::__invoke<void (*)(int), int>(void (*&&)(int), int&&) (invoke.h:96)
==5144==    by 0x139AF4: void std::thread::_Invoker<std::tuple<void (*)(int), int> >::_M_invoke<0ul, 1ul>(std::_Index_tuple<0ul, 1ul>) (std_thread.h:259)
==5144==    by 0x13995B: std::thread::_Invoker<std::tuple<void (*)(int), int> >::operator()() (std_thread.h:266)
==5144==  Address 0x15bc20 is 0 bytes inside data symbol "__gcov0._ZNSt5mutex4lockEv"
==5144== 
==5144== ----------------------------------------------------------------
==5144== 
==5144== Possible data race during read of size 8 at 0x15C740 by thread #3
==5144== Locks held: none
==5144==    at 0x121849: __gthread_mutex_lock(pthread_mutex_t*) (gthr-default.h:747)
==5144==    by 0x1228AF: std::mutex::lock() (std_mutex.h:100)
==5144==    by 0x129776: std::unique_lock<std::mutex>::lock() (unique_lock.h:139)
==5144==    by 0x12572A: std::unique_lock<std::mutex>::unique_lock(std::mutex&) (unique_lock.h:69)
==5144==    by 0x11DE77: threadWork(int) (main.cpp:105)
==5144==    by 0x13A7D8: void std::__invoke_impl<void, void (*)(int), int>(std::__invoke_other, void (*&&)(int), int&&) (invoke.h:61)
==5144==    by 0x139FC3: std::__invoke_result<void (*)(int), int>::type std::__invoke<void (*)(int), int>(void (*&&)(int), int&&) (invoke.h:96)
==5144==    by 0x139AF4: void std::thread::_Invoker<std::tuple<void (*)(int), int> >::_M_invoke<0ul, 1ul>(std::_Index_tuple<0ul, 1ul>) (std_thread.h:259)
==5144==    by 0x13995B: std::thread::_Invoker<std::tuple<void (*)(int), int> >::operator()() (std_thread.h:266)
==5144==    by 0x139827: std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)(int), int> > >::_M_run() (std_thread.h:211)
==5144==    by 0x494F252: ??? (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.30)
==5144==    by 0x485396A: ??? (in /usr/libexec/valgrind/vgpreload_helgrind-amd64-linux.so)
==5144== 
==5144== This conflicts with a previous write of size 8 by thread #2
==5144== Locks held: none
==5144==    at 0x121854: __gthread_mutex_lock(pthread_mutex_t*) (gthr-default.h:747)
==5144==    by 0x1228AF: std::mutex::lock() (std_mutex.h:100)
==5144==    by 0x129776: std::unique_lock<std::mutex>::lock() (unique_lock.h:139)
==5144==    by 0x12572A: std::unique_lock<std::mutex>::unique_lock(std::mutex&) (unique_lock.h:69)
==5144==    by 0x11DE77: threadWork(int) (main.cpp:105)
==5144==    by 0x13A7D8: void std::__invoke_impl<void, void (*)(int), int>(std::__invoke_other, void (*&&)(int), int&&) (invoke.h:61)
==5144==    by 0x139FC3: std::__invoke_result<void (*)(int), int>::type std::__invoke<void (*)(int), int>(void (*&&)(int), int&&) (invoke.h:96)
==5144==    by 0x139AF4: void std::thread::_Invoker<std::tuple<void (*)(int), int> >::_M_invoke<0ul, 1ul>(std::_Index_tuple<0ul, 1ul>) (std_thread.h:259)
==5144==  Address 0x15c740 is 0 bytes inside data symbol "__gcov0._ZL20__gthread_mutex_lockP15pthread_mutex_t"
==5144== 
==5144== ----------------------------------------------------------------
==5144== 
==5144== Possible data race during write of size 8 at 0x15C740 by thread #3
==5144== Locks held: none
==5144==    at 0x121854: __gthread_mutex_lock(pthread_mutex_t*) (gthr-default.h:747)
==5144==    by 0x1228AF: std::mutex::lock() (std_mutex.h:100)
==5144==    by 0x129776: std::unique_lock<std::mutex>::lock() (unique_lock.h:139)
==5144==    by 0x12572A: std::unique_lock<std::mutex>::unique_lock(std::mutex&) (unique_lock.h:69)
==5144==    by 0x11DE77: threadWork(int) (main.cpp:105)
==5144==    by 0x13A7D8: void std::__invoke_impl<void, void (*)(int), int>(std::__invoke_other, void (*&&)(int), int&&) (invoke.h:61)
==5144==    by 0x139FC3: std::__invoke_result<void (*)(int), int>::type std::__invoke<void (*)(int), int>(void (*&&)(int), int&&) (invoke.h:96)
==5144==    by 0x139AF4: void std::thread::_Invoker<std::tuple<void (*)(int), int> >::_M_invoke<0ul, 1ul>(std::_Index_tuple<0ul, 1ul>) (std_thread.h:259)
==5144==    by 0x13995B: std::thread::_Invoker<std::tuple<void (*)(int), int> >::operator()() (std_thread.h:266)
==5144==    by 0x139827: std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)(int), int> > >::_M_run() (std_thread.h:211)
==5144==    by 0x494F252: ??? (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.30)
==5144==    by 0x485396A: ??? (in /usr/libexec/valgrind/vgpreload_helgrind-amd64-linux.so)
==5144== 
==5144== This conflicts with a previous write of size 8 by thread #2
==5144== Locks held: none
==5144==    at 0x121854: __gthread_mutex_lock(pthread_mutex_t*) (gthr-default.h:747)
==5144==    by 0x1228AF: std::mutex::lock() (std_mutex.h:100)
==5144==    by 0x129776: std::unique_lock<std::mutex>::lock() (unique_lock.h:139)
==5144==    by 0x12572A: std::unique_lock<std::mutex>::unique_lock(std::mutex&) (unique_lock.h:69)
==5144==    by 0x11DE77: threadWork(int) (main.cpp:105)
==5144==    by 0x13A7D8: void std::__invoke_impl<void, void (*)(int), int>(std::__invoke_other, void (*&&)(int), int&&) (invoke.h:61)
==5144==    by 0x139FC3: std::__invoke_result<void (*)(int), int>::type std::__invoke<void (*)(int), int>(void (*&&)(int), int&&) (invoke.h:96)
==5144==    by 0x139AF4: void std::thread::_Invoker<std::tuple<void (*)(int), int> >::_M_invoke<0ul, 1ul>(std::_Index_tuple<0ul, 1ul>) (std_thread.h:259)
==5144==  Address 0x15c740 is 0 bytes inside data symbol "__gcov0._ZL20__gthread_mutex_lockP15pthread_mutex_t"
==5144== 
==5144== ----------------------------------------------------------------
==5144== 
==5144== Possible data race during read of size 8 at 0x15C760 by thread #3
==5144== Locks held: none
==5144==    at 0x119EB4: __gthread_active_p() (gthr-default.h:301)
==5144==    by 0x12185F: __gthread_mutex_lock(pthread_mutex_t*) (gthr-default.h:748)
==5144==    by 0x1228AF: std::mutex::lock() (std_mutex.h:100)
==5144==    by 0x129776: std::unique_lock<std::mutex>::lock() (unique_lock.h:139)
==5144==    by 0x12572A: std::unique_lock<std::mutex>::unique_lock(std::mutex&) (unique_lock.h:69)
==5144==    by 0x11DE77: threadWork(int) (main.cpp:105)
==5144==    by 0x13A7D8: void std::__invoke_impl<void, void (*)(int), int>(std::__invoke_other, void (*&&)(int), int&&) (invoke.h:61)
==5144==    by 0x139FC3: std::__invoke_result<void (*)(int), int>::type std::__invoke<void (*)(int), int>(void (*&&)(int), int&&) (invoke.h:96)
==5144==    by 0x139AF4: void std::thread::_Invoker<std::tuple<void (*)(int), int> >::_M_invoke<0ul, 1ul>(std::_Index_tuple<0ul, 1ul>) (std_thread.h:259)
==5144==    by 0x13995B: std::thread::_Invoker<std::tuple<void (*)(int), int> >::operator()() (std_thread.h:266)
==5144==    by 0x139827: std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)(int), int> > >::_M_run() (std_thread.h:211)
==5144==    by 0x494F252: ??? (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.30)
==5144== 
==5144== This conflicts with a previous write of size 8 by thread #2
==5144== Locks held: none
==5144==    at 0x119EBF: __gthread_active_p() (gthr-default.h:301)
==5144==    by 0x12185F: __gthread_mutex_lock(pthread_mutex_t*) (gthr-default.h:748)
==5144==    by 0x1228AF: std::mutex::lock() (std_mutex.h:100)
==5144==    by 0x129776: std::unique_lock<std::mutex>::lock() (unique_lock.h:139)
==5144==    by 0x12572A: std::unique_lock<std::mutex>::unique_lock(std::mutex&) (unique_lock.h:69)
==5144==    by 0x11DE77: threadWork(int) (main.cpp:105)
==5144==    by 0x13A7D8: void std::__invoke_impl<void, void (*)(int), int>(std::__invoke_other, void (*&&)(int), int&&) (invoke.h:61)
==5144==    by 0x139FC3: std::__invoke_result<void (*)(int), int>::type std::__invoke<void (*)(int), int>(void (*&&)(int), int&&) (invoke.h:96)
==5144==  Address 0x15c760 is 0 bytes inside data symbol "__gcov0._ZL18__gthread_active_pv"
==5144== 
==5144== ----------------------------------------------------------------
==5144== 
==5144== Possible data race during write of size 8 at 0x15C760 by thread #3
==5144== Locks held: none
==5144==    at 0x119EBF: __gthread_active_p() (gthr-default.h:301)
==5144==    by 0x12185F: __gthread_mutex_lock(pthread_mutex_t*) (gthr-default.h:748)
==5144==    by 0x1228AF: std::mutex::lock() (std_mutex.h:100)
==5144==    by 0x129776: std::unique_lock<std::mutex>::lock() (unique_lock.h:139)
==5144==    by 0x12572A: std::unique_lock<std::mutex>::unique_lock(std::mutex&) (unique_lock.h:69)
==5144==    by 0x11DE77: threadWork(int) (main.cpp:105)
==5144==    by 0x13A7D8: void std::__invoke_impl<void, void (*)(int), int>(std::__invoke_other, void (*&&)(int), int&&) (invoke.h:61)
==5144==    by 0x139FC3: std::__invoke_result<void (*)(int), int>::type std::__invoke<void (*)(int), int>(void (*&&)(int), int&&) (invoke.h:96)
==5144==    by 0x139AF4: void std::thread::_Invoker<std::tuple<void (*)(int), int> >::_M_invoke<0ul, 1ul>(std::_Index_tuple<0ul, 1ul>) (std_thread.h:259)
==5144==    by 0x13995B: std::thread::_Invoker<std::tuple<void (*)(int), int> >::operator()() (std_thread.h:266)
==5144==    by 0x139827: std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)(int), int> > >::_M_run() (std_thread.h:211)
==5144==    by 0x494F252: ??? (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.30)
==5144== 
==5144== This conflicts with a previous write of size 8 by thread #2
==5144== Locks held: none
==5144==    at 0x119EBF: __gthread_active_p() (gthr-default.h:301)
==5144==    by 0x12185F: __gthread_mutex_lock(pthread_mutex_t*) (gthr-default.h:748)
==5144==    by 0x1228AF: std::mutex::lock() (std_mutex.h:100)
==5144==    by 0x129776: std::unique_lock<std::mutex>::lock() (unique_lock.h:139)
==5144==    by 0x12572A: std::unique_lock<std::mutex>::unique_lock(std::mutex&) (unique_lock.h:69)
==5144==    by 0x11DE77: threadWork(int) (main.cpp:105)
==5144==    by 0x13A7D8: void std::__invoke_impl<void, void (*)(int), int>(std::__invoke_other, void (*&&)(int), int&&) (invoke.h:61)
==5144==    by 0x139FC3: std::__invoke_result<void (*)(int), int>::type std::__invoke<void (*)(int), int>(void (*&&)(int), int&&) (invoke.h:96)
==5144==  Address 0x15c760 is 0 bytes inside data symbol "__gcov0._ZL18__gthread_active_pv"
==5144== 
==5144== ----------------------------------------------------------------
==5144== 
==5144== Possible data race during read of size 8 at 0x15C748 by thread #3
==5144== Locks held: none
==5144==    at 0x121860: __gthread_mutex_lock(pthread_mutex_t*) (gthr-default.h:748)
==5144==    by 0x1228AF: std::mutex::lock() (std_mutex.h:100)
==5144==    by 0x129776: std::unique_lock<std::mutex>::lock() (unique_lock.h:139)
==5144==    by 0x12572A: std::unique_lock<std::mutex>::unique_lock(std::mutex&) (unique_lock.h:69)
==5144==    by 0x11DE77: threadWork(int) (main.cpp:105)
==5144==    by 0x13A7D8: void std::__invoke_impl<void, void (*)(int), int>(std::__invoke_other, void (*&&)(int), int&&) (invoke.h:61)
==5144==    by 0x139FC3: std::__invoke_result<void (*)(int), int>::type std::__invoke<void (*)(int), int>(void (*&&)(int), int&&) (invoke.h:96)
==5144==    by 0x139AF4: void std::thread::_Invoker<std::tuple<void (*)(int), int> >::_M_invoke<0ul, 1ul>(std::_Index_tuple<0ul, 1ul>) (std_thread.h:259)
==5144==    by 0x13995B: std::thread::_Invoker<std::tuple<void (*)(int), int> >::operator()() (std_thread.h:266)
==5144==    by 0x139827: std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)(int), int> > >::_M_run() (std_thread.h:211)
==5144==    by 0x494F252: ??? (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.30)
==5144==    by 0x485396A: ??? (in /usr/libexec/valgrind/vgpreload_helgrind-amd64-linux.so)
==5144== 
==5144== This conflicts with a previous write of size 8 by thread #2
==5144== Locks held: none
==5144==    at 0x12186B: __gthread_mutex_lock(pthread_mutex_t*) (gthr-default.h:748)
==5144==    by 0x1228AF: std::mutex::lock() (std_mutex.h:100)
==5144==    by 0x129776: std::unique_lock<std::mutex>::lock() (unique_lock.h:139)
==5144==    by 0x12572A: std::unique_lock<std::mutex>::unique_lock(std::mutex&) (unique_lock.h:69)
==5144==    by 0x11DE77: threadWork(int) (main.cpp:105)
==5144==    by 0x13A7D8: void std::__invoke_impl<void, void (*)(int), int>(std::__invoke_other, void (*&&)(int), int&&) (invoke.h:61)
==5144==    by 0x139FC3: std::__invoke_result<void (*)(int), int>::type std::__invoke<void (*)(int), int>(void (*&&)(int), int&&) (invoke.h:96)
==5144==    by 0x139AF4: void std::thread::_Invoker<std::tuple<void (*)(int), int> >::_M_invoke<0ul, 1ul>(std::_Index_tuple<0ul, 1ul>) (std_thread.h:259)
==5144==  Address 0x15c748 is 8 bytes inside data symbol "__gcov0._ZL20__gthread_mutex_lockP15pthread_mutex_t"
==5144== 
==5144== ----------------------------------------------------------------
==5144== 
==5144== Possible data race during write of size 8 at 0x15C748 by thread #3
==5144== Locks held: none
==5144==    at 0x12186B: __gthread_mutex_lock(pthread_mutex_t*) (gthr-default.h:748)
==5144==    by 0x1228AF: std::mutex::lock() (std_mutex.h:100)
==5144==    by 0x129776: std::unique_lock<std::mutex>::lock() (unique_lock.h:139)
==5144==    by 0x12572A: std::unique_lock<std::mutex>::unique_lock(std::mutex&) (unique_lock.h:69)
==5144==    by 0x11DE77: threadWork(int) (main.cpp:105)
==5144==    by 0x13A7D8: void std::__invoke_impl<void, void (*)(int), int>(std::__invoke_other, void (*&&)(int), int&&) (invoke.h:61)
==5144==    by 0x139FC3: std::__invoke_result<void (*)(int), int>::type std::__invoke<void (*)(int), int>(void (*&&)(int), int&&) (invoke.h:96)
==5144==    by 0x139AF4: void std::thread::_Invoker<std::tuple<void (*)(int), int> >::_M_invoke<0ul, 1ul>(std::_Index_tuple<0ul, 1ul>) (std_thread.h:259)
==5144==    by 0x13995B: std::thread::_Invoker<std::tuple<void (*)(int), int> >::operator()() (std_thread.h:266)
==5144==    by 0x139827: std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)(int), int> > >::_M_run() (std_thread.h:211)
==5144==    by 0x494F252: ??? (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.30)
==5144==    by 0x485396A: ??? (in /usr/libexec/valgrind/vgpreload_helgrind-amd64-linux.so)
==5144== 
==5144== This conflicts with a previous write of size 8 by thread #2
==5144== Locks held: none
==5144==    at 0x12186B: __gthread_mutex_lock(pthread_mutex_t*) (gthr-default.h:748)
==5144==    by 0x1228AF: std::mutex::lock() (std_mutex.h:100)
==5144==    by 0x129776: std::unique_lock<std::mutex>::lock() (unique_lock.h:139)
==5144==    by 0x12572A: std::unique_lock<std::mutex>::unique_lock(std::mutex&) (unique_lock.h:69)
==5144==    by 0x11DE77: threadWork(int) (main.cpp:105)
==5144==    by 0x13A7D8: void std::__invoke_impl<void, void (*)(int), int>(std::__invoke_other, void (*&&)(int), int&&) (invoke.h:61)
==5144==    by 0x139FC3: std::__invoke_result<void (*)(int), int>::type std::__invoke<void (*)(int), int>(void (*&&)(int), int&&) (invoke.h:96)
==5144==    by 0x139AF4: void std::thread::_Invoker<std::tuple<void (*)(int), int> >::_M_invoke<0ul, 1ul>(std::_Index_tuple<0ul, 1ul>) (std_thread.h:259)
==5144==  Address 0x15c748 is 8 bytes inside data symbol "__gcov0._ZL20__gthread_mutex_lockP15pthread_mutex_t"
==5144== 
==5144== ---Thread-Announcement------------------------------------------
==5144== 
==5144== Thread #4 was created
==5144==    at 0x4BE49F3: clone (clone.S:76)
==5144==    by 0x4BE58EE: __clone_internal (clone-internal.c:83)
==5144==    by 0x4B536D8: create_thread (pthread_create.c:295)
==5144==    by 0x4B541FF: pthread_create@@GLIBC_2.34 (pthread_create.c:828)
==5144==    by 0x4853767: ??? (in /usr/libexec/valgrind/vgpreload_helgrind-amd64-linux.so)
==5144==    by 0x494F328: std::thread::_M_start_thread(std::unique_ptr<std::thread::_State, std::default_delete<std::thread::_State> >, void (*)()) (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.30)
==5144==    by 0x13112D: std::thread::thread<void (&)(int), int, void>(void (&)(int), int&&) (std_thread.h:143)
==5144==    by 0x12DFB6: void __gnu_cxx::new_allocator<std::thread>::construct<std::thread, void (&)(int), int>(std::thread*, void (&)(int), int&&) (new_allocator.h:162)
==5144==    by 0x12A893: void std::allocator_traits<std::allocator<std::thread> >::construct<std::thread, void (&)(int), int>(std::allocator<std::thread>&, std::thread*, void (&)(int), int&&) (alloc_traits.h:516)
==5144==    by 0x12AA91: void std::vector<std::thread, std::allocator<std::thread> >::_M_realloc_insert<void (&)(int), int>(__gnu_cxx::__normal_iterator<std::thread*, std::vector<std::thread, std::allocator<std::thread> > >, void (&)(int), int&&) (vector.tcc:449)
==5144==    by 0x1268C8: std::thread& std::vector<std::thread, std::allocator<std::thread> >::emplace_back<void (&)(int), int>(void (&)(int), int&&) (vector.tcc:121)
==5144==    by 0x121036: main (main.cpp:359)
==5144== 
==5144== ----------------------------------------------------------------
==5144== 
==5144== Possible data race during read of size 8 at 0x15A560 by thread #1
==5144== Locks held: none
==5144==    at 0x124C4B: int&& std::forward<int>(std::remove_reference<int>::type&) (move.h:77)
==5144==    by 0x1267DB: std::thread& std::vector<std::thread, std::allocator<std::thread> >::emplace_back<void (&)(int), int>(void (&)(int), int&&) (vector.tcc:115)
==5144==    by 0x121036: main (main.cpp:359)
==5144== 
==5144== This conflicts with a previous write of size 8 by thread #4
==5144== Locks held: none
==5144==    at 0x124C56: int&& std::forward<int>(std::remove_reference<int>::type&) (move.h:77)
==5144==    by 0x139F37: std::tuple_element<1ul, std::tuple<void (*)(int), int> >::type&& std::get<1ul, void (*)(int), int>(std::tuple<void (*)(int), int>&&) (tuple:1408)
==5144==    by 0x139A9C: void std::thread::_Invoker<std::tuple<void (*)(int), int> >::_M_invoke<0ul, 1ul>(std::_Index_tuple<0ul, 1ul>) (std_thread.h:259)
==5144==    by 0x13995B: std::thread::_Invoker<std::tuple<void (*)(int), int> >::operator()() (std_thread.h:266)
==5144==    by 0x139827: std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)(int), int> > >::_M_run() (std_thread.h:211)
==5144==    by 0x494F252: ??? (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.30)
==5144==    by 0x485396A: ??? (in /usr/libexec/valgrind/vgpreload_helgrind-amd64-linux.so)
==5144==    by 0x4B53AC2: start_thread (pthread_create.c:442)
==5144==  Address 0x15a560 is 0 bytes inside data symbol "__gcov0._ZSt7forwardIiEOT_RNSt16remove_referenceIS0_E4typeE"
==5144== 
==5144== ----------------------------------------------------------------
==5144== 
==5144== Possible data race during write of size 8 at 0x15A560 by thread #1
==5144== Locks held: none
==5144==    at 0x124C56: int&& std::forward<int>(std::remove_reference<int>::type&) (move.h:77)
==5144==    by 0x1267DB: std::thread& std::vector<std::thread, std::allocator<std::thread> >::emplace_back<void (&)(int), int>(void (&)(int), int&&) (vector.tcc:115)
==5144==    by 0x121036: main (main.cpp:359)
==5144== 
==5144== This conflicts with a previous write of size 8 by thread #4
==5144== Locks held: none
==5144==    at 0x124C56: int&& std::forward<int>(std::remove_reference<int>::type&) (move.h:77)
==5144==    by 0x139F37: std::tuple_element<1ul, std::tuple<void (*)(int), int> >::type&& std::get<1ul, void (*)(int), int>(std::tuple<void (*)(int), int>&&) (tuple:1408)
==5144==    by 0x139A9C: void std::thread::_Invoker<std::tuple<void (*)(int), int> >::_M_invoke<0ul, 1ul>(std::_Index_tuple<0ul, 1ul>) (std_thread.h:259)
==5144==    by 0x13995B: std::thread::_Invoker<std::tuple<void (*)(int), int> >::operator()() (std_thread.h:266)
==5144==    by 0x139827: std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)(int), int> > >::_M_run() (std_thread.h:211)
==5144==    by 0x494F252: ??? (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.30)
==5144==    by 0x485396A: ??? (in /usr/libexec/valgrind/vgpreload_helgrind-amd64-linux.so)
==5144==    by 0x4B53AC2: start_thread (pthread_create.c:442)
==5144==  Address 0x15a560 is 0 bytes inside data symbol "__gcov0._ZSt7forwardIiEOT_RNSt16remove_referenceIS0_E4typeE"
==5144== 
server uses the LF pattern
Server listening on port 9034
New connection accepted
==5144== ---Thread-Announcement------------------------------------------
==5144== 
==5144== Thread #5 was created
==5144==    at 0x4BE49F3: clone (clone.S:76)
==5144==    by 0x4BE58EE: __clone_internal (clone-internal.c:83)
==5144==    by 0x4B536D8: create_thread (pthread_create.c:295)
==5144==    by 0x4B541FF: pthread_create@@GLIBC_2.34 (pthread_create.c:828)
==5144==    by 0x4853767: ??? (in /usr/libexec/valgrind/vgpreload_helgrind-amd64-linux.so)
==5144==    by 0x494F328: std::thread::_M_start_thread(std::unique_ptr<std::thread::_State, std::default_delete<std::thread::_State> >, void (*)()) (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.30)
==5144==    by 0x13112D: std::thread::thread<void (&)(int), int, void>(void (&)(int), int&&) (std_thread.h:143)
==5144==    by 0x12DFB6: void __gnu_cxx::new_allocator<std::thread>::construct<std::thread, void (&)(int), int>(std::thread*, void (&)(int), int&&) (new_allocator.h:162)
==5144==    by 0x12A893: void std::allocator_traits<std::allocator<std::thread> >::construct<std::thread, void (&)(int), int>(std::allocator<std::thread>&, std::thread*, void (&)(int), int&&) (alloc_traits.h:516)
==5144==    by 0x126828: std::thread& std::vector<std::thread, std::allocator<std::thread> >::emplace_back<void (&)(int), int>(void (&)(int), int&&) (vector.tcc:115)
==5144==    by 0x121036: main (main.cpp:359)
==5144== 
==5144== ----------------------------------------------------------------
==5144== 
==5144==  Lock at 0x1554C0 was first observed
==5144==    at 0x4850CCF: ??? (in /usr/libexec/valgrind/vgpreload_helgrind-amd64-linux.so)
==5144==    by 0x121886: __gthread_mutex_lock(pthread_mutex_t*) (gthr-default.h:749)
==5144==    by 0x1228AF: std::mutex::lock() (std_mutex.h:100)
==5144==    by 0x129776: std::unique_lock<std::mutex>::lock() (unique_lock.h:139)
==5144==    by 0x12572A: std::unique_lock<std::mutex>::unique_lock(std::mutex&) (unique_lock.h:69)
==5144==    by 0x11DE77: threadWork(int) (main.cpp:105)
==5144==    by 0x13A7D8: void std::__invoke_impl<void, void (*)(int), int>(std::__invoke_other, void (*&&)(int), int&&) (invoke.h:61)
==5144==    by 0x139FC3: std::__invoke_result<void (*)(int), int>::type std::__invoke<void (*)(int), int>(void (*&&)(int), int&&) (invoke.h:96)
==5144==    by 0x139AF4: void std::thread::_Invoker<std::tuple<void (*)(int), int> >::_M_invoke<0ul, 1ul>(std::_Index_tuple<0ul, 1ul>) (std_thread.h:259)
==5144==    by 0x13995B: std::thread::_Invoker<std::tuple<void (*)(int), int> >::operator()() (std_thread.h:266)
==5144==    by 0x139827: std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)(int), int> > >::_M_run() (std_thread.h:211)
==5144==    by 0x494F252: ??? (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.30)
==5144==  Address 0x1554c0 is 0 bytes inside data symbol "mtx"
==5144== 
==5144== Possible data race during write of size 8 at 0x155530 by thread #1
==5144== Locks held: none
==5144==    at 0x12B004: std::deque<int, std::allocator<int> >::push_back(int const&) (stl_deque.h:1503)
==5144==    by 0x126B44: std::queue<int, std::deque<int, std::allocator<int> > >::push(int const&) (stl_queue.h:266)
==5144==    by 0x121279: main (main.cpp:375)
==5144== 
==5144== This conflicts with a previous read of size 8 by thread #5
==5144== Locks held: 1, at address 0x1554C0
==5144==    at 0x12D3B4: std::operator==(std::_Deque_iterator<int, int&, int*> const&, std::_Deque_iterator<int, int&, int*> const&) (stl_deque.h:269)
==5144==    by 0x129874: std::deque<int, std::allocator<int> >::empty() const (stl_deque.h:1312)
==5144==    by 0x1257E3: std::queue<int, std::deque<int, std::allocator<int> > >::empty() const (stl_queue.h:204)
==5144==    by 0x11DE0C: threadWork(int)::{lambda()#1}::operator()() const (main.cpp:110)
==5144==    by 0x12142E: void std::condition_variable::wait<threadWork(int)::{lambda()#1}>(std::unique_lock<std::mutex>&, threadWork(int)::{lambda()#1}) (condition_variable:102)
==5144==    by 0x11DE9F: threadWork(int) (main.cpp:110)
==5144==    by 0x13A7D8: void std::__invoke_impl<void, void (*)(int), int>(std::__invoke_other, void (*&&)(int), int&&) (invoke.h:61)
==5144==    by 0x139FC3: std::__invoke_result<void (*)(int), int>::type std::__invoke<void (*)(int), int>(void (*&&)(int), int&&) (invoke.h:96)
==5144==  Address 0x155530 is 48 bytes inside data symbol "clientQueue"
==5144== 
==5144== ----------------------------------------------------------------
==5144== 
==5144== Thread #1: pthread_cond_{signal,broadcast}: dubious: associated lock is not held by any thread
==5144==    at 0x48515C6: ??? (in /usr/libexec/valgrind/vgpreload_helgrind-amd64-linux.so)
==5144==    by 0x1212B7: main (main.cpp:376)
==5144== 
Received action: Newgraph 3,3

Newgraph command:
Newgraph with 3 vertices and 3 edges
Received action: Removeedge 0,2

Removeedge command:
Received action: Newedge 0,2,10

Newedge command:
Received action: prim 0,2

MST calculated using prim algorithm:
Received action: kruskal 0,2

MST calculated using kruskal algorithm:
==5144== 
==5144== Process terminating with default action of signal 2 (SIGINT)
==5144==    at 0x4BE645F: accept (accept.c:26)
==5144==    by 0x121102: main (main.cpp:369)
==5144== 
==5144== Use --history-level=approx or =none to gain increased speed, at
==5144== the cost of reduced accuracy of conflicting-access information
==5144== For lists of detected and suppressed errors, rerun with: -s
==5144== ERROR SUMMARY: 254 errors from 88 contexts (suppressed: 432 from 146)
